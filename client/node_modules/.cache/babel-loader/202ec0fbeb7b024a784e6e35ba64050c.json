{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js\";\nimport './Memory.css';\nimport Board from '../Board/Board.js';\nimport React from 'react';\nimport img_loader from './images/images';\nimport PropTypes from 'prop-types';\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.updateProgress = (field, val) => {\n      this.setState({\n        [field]: val\n      });\n    };\n\n    this.name = \"Memory\";\n    this.state = {\n      card_list: this.load_cards(),\n      pair_left: -1,\n      locked: false,\n      flipped: [],\n      percent: 0\n    };\n    this.clickOnCard.bind(this);\n    this.close_cards = this.close_cards.bind(this);\n  }\n\n  test_match(flip) {\n    if (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit à changer\n\n    const ndx = this.getFruitIndex(fruit); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getFruitIndex(fruit) {\n    return this.state.card_list.findIndex(f => f.k === fruit.k);\n  }\n\n  getFruit(ndx) {\n    return this.state.card_list[ndx];\n  }\n\n  close_cards(flip, timer) {\n    console.log(\"gF\" + this); //cache les cartes visibles\n\n    flip.forEach(ndx => {\n      console.log(\"hide ndx:\" + ndx);\n      const fruit = this.getFruit(ndx);\n      fruit.visible = false;\n      this.updateFruit(fruit);\n    });\n    this.setState({\n      flipped: [],\n      locked: false\n    });\n    clearTimeout(timer);\n  }\n\n  match() {\n    // reset\n    this.setState({\n      pair_left: this.state.pair_left - 1,\n      flipped: []\n    });\n  }\n\n  clickOnCard(fruit) {\n    const flip = [...this.state.flipped];\n    if (fruit.visible || this.state.locked) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id); //set fruit visible\n\n    fruit.visible = true;\n    this.updateFruit(fruit); //save flipped card\n\n    flip.push(this.getFruitIndex(fruit)); //if pair is flipped\n\n    if (flip.length === 2) {\n      if (this.test_match(flip) === true) {\n        this.match();\n      } else {\n        //set timer for keeping cards visible before hidding\n        this.setState({\n          locked: true\n        });\n        var timer = setTimeout(this.close_cards, 800, flip, timer);\n      }\n    } else this.setState({\n      flipped: flip\n    });\n\n    console.log(\"quit click\");\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    let dup = [];\n    fruits.forEach(f => dup.push({ ...f\n    }));\n    dup.forEach(elem => elem.k = elem.id + dup.length);\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return shuffle(cards); //\t\treturn cards;\n  }\n\n  render() {\n    console.log(\"paire restante: \" + this.state.pair_left); // to init pair_left\n\n    if (this.state.pair_left === -1) this.setState({\n      pair_left: this.state.card_list.length / 2\n    });\n    if (this.state.pair_left === 0) return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"You win\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this);else return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game_field\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          donne: this.state.card_list,\n          onClick: i => this.clickOnCard(i)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n            width: 1000,\n            percent: this.state.percent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.updateProgress(\"percent\", this.state.percent + 0.1),\n            children: \"Add 10%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js"],"names":["Board","React","img_loader","PropTypes","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Memory","Component","constructor","props","state","updateProgress","field","val","setState","name","card_list","load_cards","pair_left","locked","flipped","percent","clickOnCard","bind","close_cards","test_match","flip","getFruit","id","console","log","updateFruit","fruit","lst","ndx","getFruitIndex","findIndex","f","k","timer","forEach","visible","clearTimeout","match","push","setTimeout","fruits","dup","elem","cards","render","i"],"mappings":"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","sourcesContent":["import './Memory.css';\nimport Board from '../Board/Board.js'\nimport React from 'react';\nimport img_loader from './images/images'\nimport PropTypes from 'prop-types'\n\nfunction shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\"\n\t\tthis.state = {\n\t\t\tcard_list: this.load_cards(),\n\t\t\tpair_left: -1,\n\t\t\tlocked: false,\n\t\t\tflipped: [],\n\t\t\tpercent: 0,\n\t\t};\n\t\tthis.clickOnCard.bind(this);\n\t\tthis.close_cards = this.close_cards.bind(this);\n\t}\n\ttest_match(flip)\n\t{\n\t\tif (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit à changer\n\t\tconst ndx = this.getFruitIndex(fruit);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\n\tgetFruitIndex(fruit)\n\t{\n\t\treturn this.state.card_list.findIndex(f => f.k === fruit.k);\n\t}\n\tgetFruit(ndx)\n\t{\n\t\treturn this.state.card_list[ndx];\n\t}\n\tclose_cards(flip, timer)\n\t{\n\t\tconsole.log(\"gF\" + this);\n\t\t//cache les cartes visibles\n\t\tflip.forEach((ndx)=> {\n\t\t\tconsole.log(\"hide ndx:\" + ndx);\n\t\t\tconst fruit = this.getFruit(ndx);\n\t\t\tfruit.visible = false;\n\t\t\tthis.updateFruit(fruit);\n\t\t});\n\t\tthis.setState({flipped: [], locked: false});\n\t\tclearTimeout(timer);\n\t}\n\n\tmatch()\n\t{\n\t\t// reset\n\t\tthis.setState({\n\t\t\tpair_left: this.state.pair_left - 1,\n\t\t\tflipped: []});\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\tconst flip = [...this.state.flipped];\n\t\tif (fruit.visible || this.state.locked)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\t//set fruit visible\n\t\tfruit.visible = true;\n\t\tthis.updateFruit(fruit);\n\t\t//save flipped card\n\t\tflip.push(this.getFruitIndex(fruit));\n\t\t//if pair is flipped\n\t\tif (flip.length === 2)\n\t\t{\n\t\t\tif (this.test_match(flip) === true)\n\t\t\t{\n\t\t\t\tthis.match();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//set timer for keeping cards visible before hidding\n\t\t\t\tthis.setState({locked: true});\n\t\t\t\tvar timer = setTimeout(this.close_cards, 800, flip, timer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthis.setState({flipped: flip});\n\n\t\tconsole.log(\"quit click\");\n\t}\n\n\n\tload_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tlet dup = [];\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn shuffle(cards);\n//\t\treturn cards;\n}\nstate = {\n  };\n\tupdateProgress = (field, val) => {\n\t\tthis.setState({ [field]: val });\n\t};\n\n\trender(){\n\t\tconsole.log(\"paire restante: \" + this.state.pair_left);\n\t\n\t\t// to init pair_left\n\t\tif (this.state.pair_left === -1)\n\t\t\tthis.setState({pair_left: this.state.card_list.length / 2});\n\t\tif (this.state.pair_left === 0)\n\t\t\treturn (<h1>You win</h1>);\n\t\telse\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"game_field\">\n    \t\t    \t\t<Board donne={this.state.card_list} onClick={(i) => this.clickOnCard(i)}/>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t<ProgressBar width={1000} percent={this.state.percent}/>\n\t\t\t\t<button\n            \tonClick={() =>\n            \tthis.updateProgress(\"percent\", this.state.percent + 0.1)}>\n            Add 10%\n          </button>\n\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)};\n\n}\nexport default Memory;"]},"metadata":{},"sourceType":"module"}