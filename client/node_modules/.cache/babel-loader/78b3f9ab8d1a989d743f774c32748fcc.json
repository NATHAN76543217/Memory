{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport Board from './Board';\nimport React from 'react';\nimport img_loader from './images';\nimport PropTypes from 'prop-types';\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      card_list: this.load_cards(),\n      flipped: [],\n      nb_row: 5,\n      nb_col: 6\n    };\n    this.clickOnCard.bind(this);\n  }\n\n  test_match() {\n    if (this.state.flipped[0].id === this.state.flipped[1].id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_lisl]; //récupere l'index du fruit a changer\n\n    const ndx = lst.findIndex(f => f.k === fruit.k); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit;\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  clickOnCard(fruit) {\n    if (fruit.visible) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n    lst[ndx].visible = true;\n    this.setState({\n      card_list: lst,\n      flipped: [this.state.flipped, fruit]\n    });\n\n    if (this.state.flipped.length === 2) {\n      if (this.test_match() === true) {}\n    }\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    let dup = [];\n    fruits.forEach(f => dup.push({ ...f\n    }));\n    dup.forEach(elem => elem.k = elem.id + dup.length);\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return cards; //\t\treturn cards;\n  }\n\n  render() {\n    console.log(\"flipped :\" + this.state.flipped);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        donne: this.state.card_list,\n        onClick: i => this.clickOnCard(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["Board","React","img_loader","PropTypes","Memory","Component","constructor","props","state","card_list","load_cards","flipped","nb_row","nb_col","clickOnCard","bind","test_match","id","console","log","updateFruit","fruit","lst","card_lisl","ndx","findIndex","f","k","setState","visible","length","fruits","dup","forEach","push","elem","cards","render","i"],"mappings":"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","sourcesContent":["import './Memory.css';\nimport Board from './Board'\nimport React from 'react';\nimport img_loader from './images'\nimport PropTypes from 'prop-types'\n\n\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcard_list: this.load_cards(),\n\t\t\tflipped: [],\n\t\t\tnb_row: 5,\n\t\t\tnb_col: 6,\n\t\t};\n\t\tthis.clickOnCard.bind(this);\n\t}\n\ttest_match()\n\t{\n\t\tif (this.state.flipped[0].id === this.state.flipped[1].id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_lisl];\n\t\t//récupere l'index du fruit a changer\n\t\tconst ndx = lst.findIndex(f => f.k === fruit.k);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\tthis.setState({card_list: lst})\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\tif (fruit.visible)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\tlst[ndx].visible = true;\n\n\t\tthis.setState({\n\t\t\tcard_list: lst,\n\t\t\tflipped: [this.state.flipped, fruit],\n\t\t})\n\t\tif (this.state.flipped.length === 2)\n\t\t{\n\t\t\tif (this.test_match() === true)\n\t\t\t{\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\nload_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tlet dup = [];\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn cards;\n//\t\treturn cards;\n}\n\n  render(){\n    console.log(\"flipped :\" + this.state.flipped);\n\n\treturn (\n\t\t<div className=\"game_field\">\n    \t    \t<Board donne={this.state.card_list} onClick={(i) => this.clickOnCard(i)}/>\n\t\t</div>\n\t\t)}\n}\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/"]},"metadata":{},"sourceType":"module"}