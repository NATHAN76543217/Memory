{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js\";\nimport './Memory.css';\nimport Board from '../Board/Board.js';\nimport React, { Fragment } from 'react';\nimport img_loader from './images/images';\nimport { Button } from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\"; //mélange de facon aléatoire le tableau passé en entrée\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProgress = (field, val) => {\n      this.setState({\n        [field]: val\n      });\n    };\n\n    this.name = \"Memory\";\n    this.state = {\n      card_list: this.load_cards(),\n      pair_left: -1,\n      locked: false,\n      flipped: [],\n      percent: 1,\n      time_left: 180,\n      game_state: null,\n      timer: null\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.clickOnCard.bind(this);\n    this.close_cards = this.close_cards.bind(this);\n  } //Game state\n\n\n  startGame() {\n    console.log(\"START GAME\");\n    this.setState({\n      game_state: 0,\n      card_list: this.load_cards(),\n      pair_left: this.state.card_list.length / 2,\n      time_left: 180,\n      percent: 1,\n      time_left: 180\n    });\n    this.startTimer();\n  }\n\n  loosing() {\n    console.log(\"before: \" + this.state.timer);\n    clearInterval(this.state.timer);\n    console.log(\"after: \" + this.state.timer);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You loose...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.startGame(),\n        block: true,\n        children: \"Retry?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }, this);\n  }\n\n  winning() {\n    if (this.state.game_state !== 1) {\n      this.setState({\n        game_state: 1\n      });\n      clearInterval(this.state.timer);\n      console.log(\" res timer= \" + this.timer);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You WIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.startGame(),\n        block: true,\n        children: \"Retry?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 3\n    }, this);\n  } //Jeu\n\n\n  test_match(flip) {\n    if (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit à changer\n\n    const ndx = this.getFruitIndex(fruit); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getFruitIndex(fruit) {\n    return this.state.card_list.findIndex(f => f.k === fruit.k);\n  }\n\n  getFruit(ndx) {\n    return this.state.card_list[ndx];\n  }\n\n  close_cards(flip, timer) {\n    console.log(\"gF\" + this); //cache les cartes visibles\n\n    flip.forEach(ndx => {\n      console.log(\"hide ndx:\" + ndx);\n      const fruit = this.getFruit(ndx);\n      fruit.visible = false;\n      this.updateFruit(fruit);\n    });\n    this.setState({\n      flipped: [],\n      locked: false\n    });\n    clearTimeout(timer);\n  }\n\n  match() {\n    // reset\n    this.setState({\n      pair_left: this.state.pair_left - 1,\n      flipped: []\n    });\n  }\n\n  clickOnCard(fruit) {\n    const flip = [...this.state.flipped];\n    if (fruit.visible || this.state.locked) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id); //set fruit visible\n\n    fruit.visible = true;\n    this.updateFruit(fruit); //save flipped card\n\n    flip.push(this.getFruitIndex(fruit)); //if pair is flipped\n\n    if (flip.length === 2) {\n      if (this.test_match(flip) === true) {\n        this.match();\n      } else {\n        //set timer for keeping cards visible before hidding\n        this.setState({\n          locked: true\n        });\n        var timer = setTimeout(this.close_cards, 500, flip, timer);\n      }\n    } else this.setState({\n      flipped: flip\n    });\n\n    console.log(\"quit click\");\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    let dup = [];\n    fruits.forEach(f => dup.push({ ...f\n    }));\n    dup.forEach(elem => elem.k = elem.id + dup.length);\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return shuffle(cards);\n  } //Timer\n\n\n  startTimer() {\n    this.setState({\n      timer: setInterval(this.countDown, 1000)\n    }, () => {\n      console.log(\"START TIMER: \" + this.state.timer);\n    });\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds_left = this.state.time_left - 1;\n    console.log(\"-timeleft:\" + seconds_left);\n    this.setState({\n      time_left: seconds_left,\n      percent: this.state.time_left / 180\n    }); // Check if we're at zero.\n\n    if (seconds_left === 0) {\n      console.log(\"TIME'S UP !!!!!\");\n      this.setState({\n        game_state: -1\n      });\n      clearInterval(this.state.timer);\n    }\n  }\n\n  render() {\n    //console.log(\"paire restante: \" + this.state.pair_left);\n    //console.log(\"game status: \" + this.state.game_state);\n    if (this.state.game_state === null) this.startGame(); // to init pair_left\n\n    if (this.state.pair_left === 0) return this.winning();\n    if (this.state.game_state === -1) return this.loosing();else return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game_field\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board\",\n          children: [/*#__PURE__*/_jsxDEV(Board, {\n            donne: this.state.card_list,\n            onClick: i => this.clickOnCard(i)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n            width: 400,\n            percent: this.state.percent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Display texte\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js"],"names":["Board","React","Fragment","img_loader","Button","ProgressBar","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Memory","Component","constructor","props","updateProgress","field","val","setState","name","state","card_list","load_cards","pair_left","locked","flipped","percent","time_left","game_state","timer","startTimer","bind","countDown","clickOnCard","close_cards","startGame","console","log","loosing","clearInterval","winning","test_match","flip","getFruit","id","updateFruit","fruit","lst","ndx","getFruitIndex","findIndex","f","k","forEach","visible","clearTimeout","match","push","setTimeout","fruits","dup","elem","cards","setInterval","seconds_left","render","i"],"mappings":"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","sourcesContent":["import './Memory.css';\nimport Board from '../Board/Board.js'\nimport React, { Fragment } from 'react';\nimport img_loader from './images/images'\nimport {Button} from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\"\n\n//mélange de facon aléatoire le tableau passé en entrée\nfunction shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\"\n\t\tthis.state = {\n\t\t\tcard_list: this.load_cards(),\n\t\t\tpair_left: -1,\n\t\t\tlocked: false,\n\t\t\tflipped: [],\n\t\t\tpercent: 1,\n\t\t\ttime_left: 180,\n\t\t\tgame_state: null,\n\t\t\ttimer: null,\n\t\t};\n\t\tthis.startTimer = this.startTimer.bind(this);\n\t\tthis.countDown = this.countDown.bind(this);\n\t\tthis.clickOnCard.bind(this);\n\t\tthis.close_cards = this.close_cards.bind(this);\n\t}\n\t//Game state\n\tstartGame()\n\t{\n\t\tconsole.log(\"START GAME\");\n\t\tthis.setState({\n\t\t\tgame_state: 0,\n\t\t\tcard_list: this.load_cards(),\n\t\t\tpair_left: this.state.card_list.length / 2,\n\t\t\ttime_left: 180,\n\t\t\tpercent: 1,\n\t\t\ttime_left: 180});\n\t\tthis.startTimer();\n\t}\n\tloosing()\n\t{\n\t\tconsole.log(\"before: \" + this.state.timer);\n\t\tclearInterval(this.state.timer);\n\t\tconsole.log(\"after: \" + this.state.timer);\n\n\t\treturn (\n\t\t<Fragment>\n\t\t\t<h1>You loose...</h1>\n\t\t\t<Button onClick={() => this.startGame()} block>\n\t\t\tRetry?\n\t\t\t</Button>\n\t\t</Fragment>);\n\t}\n\n\twinning()\n\t{\n\t\tif (this.state.game_state !== 1)\n\t\t{\n\t\t\tthis.setState({game_state: 1});\n\t\t\tclearInterval(this.state.timer);\n\t\t\tconsole.log(\" res timer= \" + this.timer);\n\t\t}\n\t\treturn (\n\t\t<Fragment>\n\t\t\t<h1>You WIN</h1>\n\t\t\t<Button onClick={() => this.startGame()} block>\n\t\t\t\tRetry?\n\t\t\t</Button>\n\t\t</Fragment>);\n\t}\n\t//Jeu\n\ttest_match(flip)\n\t{\n\t\tif (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit à changer\n\t\tconst ndx = this.getFruitIndex(fruit);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\n\tgetFruitIndex(fruit)\n\t{\n\t\treturn this.state.card_list.findIndex(f => f.k === fruit.k);\n\t}\n\tgetFruit(ndx)\n\t{\n\t\treturn this.state.card_list[ndx];\n\t}\n\tclose_cards(flip, timer)\n\t{\n\t\tconsole.log(\"gF\" + this);\n\t\t//cache les cartes visibles\n\t\tflip.forEach((ndx)=> {\n\t\t\tconsole.log(\"hide ndx:\" + ndx);\n\t\t\tconst fruit = this.getFruit(ndx);\n\t\t\tfruit.visible = false;\n\t\t\tthis.updateFruit(fruit);\n\t\t});\n\t\tthis.setState({flipped: [], locked: false});\n\t\tclearTimeout(timer);\n\t}\n\n\tmatch()\n\t{\n\t\t// reset\n\t\tthis.setState({\n\t\t\tpair_left: this.state.pair_left - 1,\n\t\t\tflipped: []});\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\tconst flip = [...this.state.flipped];\n\t\tif (fruit.visible || this.state.locked)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\t//set fruit visible\n\t\tfruit.visible = true;\n\t\tthis.updateFruit(fruit);\n\t\t//save flipped card\n\t\tflip.push(this.getFruitIndex(fruit));\n\t\t//if pair is flipped\n\t\tif (flip.length === 2)\n\t\t{\n\t\t\tif (this.test_match(flip) === true)\n\t\t\t{\n\t\t\t\tthis.match();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//set timer for keeping cards visible before hidding\n\t\t\t\tthis.setState({locked: true});\n\t\t\t\tvar timer = setTimeout(this.close_cards, 500, flip, timer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthis.setState({flipped: flip});\n\n\t\tconsole.log(\"quit click\");\n\t}\n\n\tload_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tlet dup = [];\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn shuffle(cards);\n\t}\n\t//Timer\n\tstartTimer() {\n\t\t  this.setState({timer:  setInterval(this.countDown, 1000)}, () => {\n\t\t\tconsole.log(\"START TIMER: \" + this.state.timer);\n\t\t  });\n\t\t}\n\tcountDown() {\n\t\t// Remove one second, set state so a re-render happens.\n\t\tlet seconds_left = this.state.time_left - 1;\n\t\tconsole.log(\"-timeleft:\" + seconds_left);\n\t\tthis.setState({\n\t\t  time_left: seconds_left,\n\t\t  percent: this.state.time_left / 180,\n\t\t});\n\t\t// Check if we're at zero.\n\t\tif (seconds_left === 0) {\n\t\t\tconsole.log(\"TIME'S UP !!!!!\");\n\t\t\tthis.setState({game_state: -1});\n\t\t\tclearInterval(this.state.timer);\n\t\t}\n\t  }\n\t\n\tupdateProgress = (field, val) => {\n\t\tthis.setState({ [field]: val });\n\t};\n\n\trender(){\n\t\t//console.log(\"paire restante: \" + this.state.pair_left);\n\t\t//console.log(\"game status: \" + this.state.game_state);\n\t\tif (this.state.game_state === null)\n\t\t\tthis.startGame();\n\t\t// to init pair_left\n\t\tif (this.state.pair_left === 0)\n\t\t\treturn this.winning();\n\t\tif (this.state.game_state === -1)\n\t\t\treturn this.loosing();\n\t\telse\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"game_field\">\n\t\t\t\t\t\t<div className=\"board\">\n\t    \t\t    \t\t<Board donne={this.state.card_list} onClick={(i) => this.clickOnCard(i)}/>\n\t\t\t\t\t\t\t<ProgressBar width={400} percent={this.state.percent}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"info\">\n\t\t\t\t\t\t\t<span>Display texte</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)};\n\n}\nexport default Memory;"]},"metadata":{},"sourceType":"module"}