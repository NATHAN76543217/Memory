{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport Board from './Board';\nimport React from 'react';\nimport img_loader from './images';\nimport PropTypes from 'prop-types';\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.name = \"Memory\";\n    this.state = {\n      card_list: this.load_cards(),\n      flipped: []\n    };\n    this.clickOnCard.bind(this);\n  }\n\n  test_match() {\n    if (this.state.flipped[0].id === this.state.flipped[1].id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit a changer\n\n    const ndx = this.getIndex; //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getIndex(list, obj) {\n    return list.findIndex(f => f.k === obj.k);\n  }\n\n  clickOnCard(fruit) {\n    if (fruit.visible) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n    fruit.visible = true; //ajoute le fruit à flipped\n\n    this.setState({\n      flipped: [this.state.flipped, fruit]\n    });\n    this.updateFruit(fruit);\n    console.log(\"flipped :\" + this.state.flipped);\n\n    if (this.state.flipped.length === 2) {\n      if (this.test_match() === true) {} else {\n        //cache les cartes visibles\n        this.state.flipped.forEach(card => {\n          console.log(\"hide key:\" + card.k);\n          card.visible = false;\n        });\n        this.setState({\n          flipped: []\n        });\n      }\n    }\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    let dup = [];\n    fruits.forEach(f => dup.push({ ...f\n    }));\n    dup.forEach(elem => elem.k = elem.id + dup.length);\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return cards; //\t\treturn cards;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"this.name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        donne: this.state.card_list,\n        onClick: i => this.clickOnCard(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["Board","React","img_loader","PropTypes","Memory","Component","constructor","props","name","state","card_list","load_cards","flipped","clickOnCard","bind","test_match","id","console","log","updateFruit","fruit","lst","ndx","getIndex","setState","list","obj","findIndex","f","k","visible","length","forEach","card","fruits","dup","push","elem","cards","render","i"],"mappings":";;AAAA,OAAO,cAAP;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,UAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAIA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CACA;AACCC,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;AACA,SAAKC,IAAL,GAAY,QAAZ;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,KAAKC,UAAL,EADC;AAEZC,MAAAA,OAAO,EAAE;AAFG,KAAb;AAIA,SAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB;AACA;;AACDC,EAAAA,UAAU,GACV;AACC,QAAI,KAAKN,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBI,EAAtB,KAA6B,KAAKP,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBI,EAAvD,EACA;AACCC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aAAO,IAAP;AACA;;AACDD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAO,KAAP;AAEA;;AACDC,EAAAA,WAAW,CAACC,KAAD,EACX;AACC;AACA,UAAMC,GAAG,GAAG,CAAC,GAAG,KAAKZ,KAAL,CAAWC,SAAf,CAAZ,CAFD,CAGC;;AACA,UAAMY,GAAG,GAAG,KAAKC,QAAjB,CAJD,CAKC;;AACAF,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWF,KAAX,CAND,CAOC;;AACA,SAAKI,QAAL,CAAc;AAACd,MAAAA,SAAS,EAAEW;AAAZ,KAAd;AACA;;AACDE,EAAAA,QAAQ,CAACE,IAAD,EAAOC,GAAP,EACR;AACC,WAAOD,IAAI,CAACE,SAAL,CAAeC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQH,GAAG,CAACG,CAAhC,CAAP;AACA;;AAEDhB,EAAAA,WAAW,CAACO,KAAD,EACX;AACC,QAAIA,KAAK,CAACU,OAAV,EACC;AACDb,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBE,KAAK,CAACS,CAA5B,GAAgC,SAAhC,GAA4CT,KAAK,CAACJ,EAA9D;AACAI,IAAAA,KAAK,CAACU,OAAN,GAAgB,IAAhB,CAJD,CAKC;;AACA,SAAKN,QAAL,CAAc;AACbZ,MAAAA,OAAO,EAAE,CAAC,KAAKH,KAAL,CAAWG,OAAZ,EAAqBQ,KAArB;AADI,KAAd;AAGA,SAAKD,WAAL,CAAiBC,KAAjB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,KAAKT,KAAL,CAAWG,OAArC;;AAEA,QAAI,KAAKH,KAAL,CAAWG,OAAX,CAAmBmB,MAAnB,KAA8B,CAAlC,EACA;AACC,UAAI,KAAKhB,UAAL,OAAsB,IAA1B,EACA,CAEC,CAHD,MAKA;AACC;AACA,aAAKN,KAAL,CAAWG,OAAX,CAAmBoB,OAAnB,CAA4BC,IAAD,IAAS;AACnChB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAce,IAAI,CAACJ,CAA/B;AACAI,UAAAA,IAAI,CAACH,OAAL,GAAe,KAAf;AACA,SAHD;AAIA,aAAKN,QAAL,CAAc;AAACZ,UAAAA,OAAO,EAAE;AAAV,SAAd;AAEA;AACD;AACD;;AAGFD,EAAAA,UAAU,GACT;AACC,UAAMuB,MAAM,GAAGhC,UAAU,EAAzB;AACA,QAAIiC,GAAG,GAAG,EAAV;AACAD,IAAAA,MAAM,CAACF,OAAP,CAAeJ,CAAC,IACfO,GAAG,CAACC,IAAJ,CAAS,EAAC,GAAGR;AAAJ,KAAT,CADD;AAEAO,IAAAA,GAAG,CAACH,OAAJ,CAAYK,IAAI,IAAIA,IAAI,CAACR,CAAL,GAASQ,IAAI,CAACrB,EAAL,GAAUmB,GAAG,CAACJ,MAA3C;AACA,UAAMO,KAAK,GAAG,CAAC,GAAGJ,MAAJ,EAAY,GAAGC,GAAf,CAAd;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBoB,KAAK,CAACP,MAA1B,GAAmC,QAA/C;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYoB,KAAZ;AACA,WAAOA,KAAP,CATD,CAUD;AACC;;AAECC,EAAAA,MAAM,GAAE;AACT,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACQ,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWC,SAAzB;AAAoC,QAAA,OAAO,EAAG8B,CAAD,IAAO,KAAK3B,WAAL,CAAiB2B,CAAjB;AAApD;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,YAFD;AAKG;;AA3FJ;;AA6FA,eAAepC,MAAf","sourcesContent":["import './Memory.css';\nimport Board from './Board'\nimport React from 'react';\nimport img_loader from './images'\nimport PropTypes from 'prop-types'\n\n\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\"\n\t\tthis.state = {\n\t\t\tcard_list: this.load_cards(),\n\t\t\tflipped: [],\n\t\t};\n\t\tthis.clickOnCard.bind(this);\n\t}\n\ttest_match()\n\t{\n\t\tif (this.state.flipped[0].id === this.state.flipped[1].id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit a changer\n\t\tconst ndx = this.getIndex;\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\tgetIndex(list, obj)\n\t{\n\t\treturn list.findIndex(f => f.k === obj.k);\n\t}\n\n\tclickOnCard(fruit)\n\t{\n\t\tif (fruit.visible)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\tfruit.visible = true;\n\t\t//ajoute le fruit à flipped\n\t\tthis.setState({\n\t\t\tflipped: [this.state.flipped, fruit],\n\t\t})\n\t\tthis.updateFruit(fruit);\n\t\tconsole.log(\"flipped :\" + this.state.flipped);\n\n\t\tif (this.state.flipped.length === 2)\n\t\t{\n\t\t\tif (this.test_match() === true)\n\t\t\t{\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//cache les cartes visibles\n\t\t\t\tthis.state.flipped.forEach((card)=> {\n\t\t\t\t\tconsole.log(\"hide key:\" + card.k);\n\t\t\t\t\tcard.visible = false;\n\t\t\t\t});\n\t\t\t\tthis.setState({flipped: []});\n\n\t\t\t}\n\t\t}\n\t}\n\n\nload_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tlet dup = [];\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn cards;\n//\t\treturn cards;\n}\n\n  render(){\n\treturn (\n\t\t<h1>this.name</h1>,\n\t\t<div className=\"game_field\">\n    \t    \t<Board donne={this.state.card_list} onClick={(i) => this.clickOnCard(i)}/>\n\t\t</div>\n\t\t)}\n}\nexport default Memory;"]},"metadata":{},"sourceType":"module"}