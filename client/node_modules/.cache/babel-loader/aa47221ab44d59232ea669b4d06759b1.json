{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport Board from './Board';\nimport React from 'react';\nimport img_loader from './images';\nimport PropTypes from 'prop-types';\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.name = \"Memory\";\n    this.state = {\n      card_list: this.load_cards(),\n      flipped: []\n    };\n    this.clickOnCard.bind(this);\n  }\n\n  test_match(flip) {\n    if (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit à changer\n\n    const ndx = this.getFruitIndex(fruit); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getFruitIndex(fruit) {\n    return this.state.card_list.findIndex(f => f.k === fruit.k);\n  }\n\n  getFruit(ndx) {\n    return this.state.card_list[ndx];\n  }\n\n  close_cards(flip, timer) {\n    //cache les cartes visibles\n    flip.forEach(ndx => {\n      console.log(\"hide ndx:\" + ndx);\n      const fruit = this.getFruit(ndx);\n      fruit.visible = false;\n      this.updateFruit(fruit);\n    });\n    this.setState({\n      flipped: []\n    });\n    clearTimeout(timer);\n  }\n\n  clickOnCard(fruit) {\n    if (fruit.visible) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id); //set fruit visible\n\n    fruit.visible = true;\n    this.updateFruit(fruit); //save flipped card\n\n    const flip = [...this.state.flipped];\n    console.log(\"flipped:\" + flip);\n    flip.push(this.getFruitIndex(fruit)); //if pair is flipped\n\n    if (flip.length === 2) {\n      if (this.test_match(flip) === true) {} else {\n        //set timer for keeping cards visible\n        var timer = setTimeout(this.close_cards, 1500, flip, timer);\n      }\n    } else this.setState({\n      flipped: flip\n    });\n\n    console.log(\"quit click\");\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    let dup = [];\n    fruits.forEach(f => dup.push({ ...f\n    }));\n    dup.forEach(elem => elem.k = elem.id + dup.length);\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return cards; //\t\treturn cards;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"this.name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        donne: this.state.card_list,\n        onClick: i => this.clickOnCard(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["Board","React","img_loader","PropTypes","Memory","Component","constructor","props","name","state","card_list","load_cards","flipped","clickOnCard","bind","test_match","flip","getFruit","id","console","log","updateFruit","fruit","lst","ndx","getFruitIndex","setState","findIndex","f","k","close_cards","timer","forEach","visible","clearTimeout","push","length","setTimeout","fruits","dup","elem","cards","render","i"],"mappings":"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","sourcesContent":["import './Memory.css';\nimport Board from './Board'\nimport React from 'react';\nimport img_loader from './images'\nimport PropTypes from 'prop-types'\n\n\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\"\n\t\tthis.state = {\n\t\t\tcard_list: this.load_cards(),\n\t\t\tflipped: [],\n\t\t};\n\t\tthis.clickOnCard.bind(this);\n\t}\n\ttest_match(flip)\n\t{\n\t\tif (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit à changer\n\t\tconst ndx = this.getFruitIndex(fruit);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\n\tgetFruitIndex(fruit)\n\t{\n\t\treturn this.state.card_list.findIndex(f => f.k === fruit.k);\n\t}\n\tgetFruit(ndx)\n\t{\n\t\treturn this.state.card_list[ndx];\n\t}\n\tclose_cards(flip, timer)\n\t{\n\t\t//cache les cartes visibles\n\t\tflip.forEach((ndx)=> {\n\t\t\tconsole.log(\"hide ndx:\" + ndx);\n\t\t\tconst fruit = this.getFruit(ndx);\n\t\t\tfruit.visible = false;\n\t\t\tthis.updateFruit(fruit);\n\t\t});\n\t\tthis.setState({flipped: []});\n\t\tclearTimeout(timer);\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\tif (fruit.visible)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\t//set fruit visible\n\t\tfruit.visible = true;\n\t\tthis.updateFruit(fruit);\n\t\t//save flipped card\n\t\tconst flip = [...this.state.flipped];\n\t\tconsole.log(\"flipped:\" + flip);\n\t\tflip.push(this.getFruitIndex(fruit));\n\t\t//if pair is flipped\n\t\tif (flip.length === 2)\n\t\t{\n\t\t\tif (this.test_match(flip) === true)\n\t\t\t{\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//set timer for keeping cards visible\n\t\t\t\tvar timer = setTimeout(this.close_cards, 1500, flip, timer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthis.setState({flipped: flip});\n\n\t\tconsole.log(\"quit click\");\n\t}\n\n\nload_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tlet dup = [];\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn cards;\n//\t\treturn cards;\n}\n\n  render(){\n\n\treturn (\n\t\t<h1>this.name</h1>,\n\t\t<div className=\"game_field\">\n    \t    \t<Board donne={this.state.card_list} onClick={(i) => this.clickOnCard(i)}/>\n\t\t</div>\n\t\t)}\n}\nexport default Memory;"]},"metadata":{},"sourceType":"module"}