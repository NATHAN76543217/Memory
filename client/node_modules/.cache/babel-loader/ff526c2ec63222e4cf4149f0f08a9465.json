{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js\";\nimport './Memory.css';\nimport Board from '../Board/Board.js';\nimport InfoDisplay from \"../InfoDisplay/InfoDisplay.js\";\nimport React from 'react';\nimport img_loader from './images/images';\nimport { Button } from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\";\nimport { LinearProgress } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport API from \"../../utils/API.js\"; //mélange de facon aléatoire le tableau passé en entrée\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n} //TODO  Add Start timer on first click\n\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProgress = (field, val) => {\n      this.setState({\n        [field]: val\n      });\n    };\n\n    this.name = \"Memory\";\n    this.load_cards = this.load_cards.bind(this);\n    this.state = {\n      card_list: [],\n      nb_pair: this.props.location.data,\n      pair_left: -1,\n      locked: false,\n      flipped: [],\n      percent: 1,\n      time_left: 180,\n      loose: false,\n      timer: null,\n      user: {}\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.clickOnCard.bind(this);\n    this.close_cards = this.close_cards.bind(this);\n    this.TimerLinearProgress = withStyles(() => ({\n      root: {\n        height: 20,\n        marginTop: 30,\n        borderRadius: 5\n      },\n      colorPrimary: {\n        backgroundColor: \"#ABCDEF\"\n      },\n      bar: {\n        borderRadius: 5,\n        backgroundColor: '#1a90ff',\n        transition: \"5s ease\"\n      }\n    }))(LinearProgress);\n  }\n\n  async componentDidMount() {\n    const res = await API.getUserInfo();\n    {\n      res && this.setState({\n        user: res.data\n      });\n    }\n    this.startGame();\n  } //Game state\n\n\n  startGame() {\n    if (true && localStorage.getItem(\"running\") === \"true\") {\n      this.restoreGame();\n      return;\n    }\n\n    console.log(\"START GAME\");\n    this.setState({\n      loose: false,\n      card_list: this.load_cards(this.state.nb_pair),\n      time_left: 180,\n      percent: 1\n    }, () => {\n      this.setState({\n        pair_left: this.state.card_list.length / 2\n      });\n    });\n    console.log(\"AFTER: \" + this.state.pair_left);\n    this.startTimer();\n    localStorage.setItem(\"running\", \"true\");\n  }\n\n  restoreList() {\n    const order_list = localStorage.getItem(\"card_list_order\");\n    console.log(\"orderlist:\");\n    console.log(order_list);\n    const visible_list = localStorage.getItem(\"card_list_visible\");\n    const load_list = this.load_cards(this.state.nb_pair);\n    var card_list = [];\n    order_list.split(\",\").map(key => {\n      console.log(\"key = \" + key);\n      const ndx = load_list.findIndex(f => f.k === parseInt(key));\n\n      if (visible_list.length > 0 && parseInt(key) === visible_list[0]) {\n        load_list[ndx].visible = true;\n        visible_list.shift();\n      }\n\n      console.log(\"Push \" + load_list[ndx]);\n      card_list.push(load_list[ndx]);\n    });\n    console.log(\"Load list::\");\n    console.log(card_list);\n    return card_list;\n  }\n\n  restoreGame() {\n    this.setState({\n      loose: false,\n      percent: 1,\n      time_left: localStorage.getItem(\"time_left\"),\n      pair_left: localStorage.getItem(\"pair_left\"),\n      nb_pair: localStorage.getItem(\"nb_pair\")\n    }, this.setState({\n      card_list: this.restoreList()\n    }));\n    localStorage(\"restored\", \"true\");\n  }\n\n  endGame() {\n    //fin du jeu redi\n    localStorage.removeItem(\"running\");\n    const res = this.state.pair_left === 0 ? \"win\" : \"loose\";\n    API.sendScore(res);\n    return null;\n  }\n\n  sendScore(res) {\n    API.sendScore(res);\n  } //Jeu\n\n\n  test_match(flip) {\n    if (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit à changer\n\n    const ndx = this.getFruitIndex(f => f.k === fruit.k); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getFruitIndex(ft) {\n    return this.state.card_list.findIndex(ft);\n  }\n\n  getFruit(ndx) {\n    return this.state.card_list[ndx];\n  }\n\n  close_cards(flip, timer) {\n    console.log(\"gF\" + this); //cache les cartes visibles\n\n    flip.forEach(ndx => {\n      console.log(\"hide ndx:\" + ndx);\n      const fruit = this.getFruit(ndx);\n      fruit.visible = false;\n      this.updateFruit(fruit);\n    });\n    this.setState({\n      flipped: [],\n      locked: false\n    });\n    clearTimeout(timer);\n  }\n\n  match() {\n    // reset\n    this.setState({\n      pair_left: this.state.pair_left - 1,\n      flipped: []\n    });\n  }\n\n  clickOnCard(fruit) {\n    const flip = [...this.state.flipped];\n    if (fruit.visible || this.state.locked) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id); //set fruit visible\n\n    fruit.visible = true;\n    this.updateFruit(fruit); //save flipped card\n\n    flip.push(this.getFruitIndex(f => f.k === fruit.k)); //if pair is flipped\n\n    if (flip.length === 2) {\n      if (this.test_match(flip) === true) {\n        this.match();\n      } else {\n        //set timer for keeping cards visible before hidding\n        this.setState({\n          locked: true\n        });\n        var timer = setTimeout(this.close_cards, 500, flip, timer);\n      }\n    } else this.setState({\n      flipped: flip\n    });\n\n    console.log(\"quit click\");\n  }\n\n  load_cards(nb_pair_to_load) {\n    console.log(this.state);\n    console.log(\"Nb pair receive:\" + this.state.nb_pair);\n    const fruits = img_loader(nb_pair_to_load);\n    console.log(\"Nb fruit Loaded:\" + fruits.length);\n    let dup = []; //fill dup with a copy a fruits\n\n    fruits.forEach(f => dup.push({ ...f\n    })); //set l'id pour chaque fruit\n\n    dup.forEach(elem => elem.k = elem.id + dup.length); //cards == fruits + dup\n\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return shuffle(cards);\n  } //Timer\n\n\n  startTimer() {\n    this.setState({\n      timer: setInterval(this.countDown, 1000)\n    }, () => {\n      console.log(\"START TIMER: \" + this.state.timer);\n    });\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds_left = this.state.time_left - 1;\n    console.log(this.state.pair_left);\n    console.log(this.state.card_list);\n    console.log(\"-timeleft:\" + seconds_left);\n    this.setState({\n      time_left: seconds_left,\n      percent: this.state.time_left / 180\n    }); // Check if we're at zero.\n\n    if (seconds_left === 0) {\n      console.log(\"TIME'S UP !!!!!\");\n      this.setState({\n        loose: true\n      });\n      clearInterval(this.state.timer);\n    }\n  }\n\n  saveState() {\n    localStorage.setItem(\"pair_left\", this.state.pair_left.toString());\n    localStorage.setItem(\"time_left\", this.state.time_left.toString());\n    const card_list = this.state.card_list;\n    let visible = [];\n    let card_order = [];\n    console.log(card_list);\n    card_list.map(card => {\n      card_order.push(card.key);\n\n      if (card.visible === true) {\n        visible.push(this.getFruitIndex(f => f.k === card.k).toString());\n      }\n    });\n    console.log(\"list visible:\" + visible);\n    localStorage.setItem(\"card_list_visible\", visible);\n    localStorage.setItem(\"card_list_order\", card_order);\n  } //ProgressBar\n\n\n  render() {\n    //console.log(\"paire restante: \" + this.state.pair_left);\n    //console.log(\"game status: \" + this.state.loose);\n    // to init pair_left\n    console.log(\"cardlist size =\" + this.state.card_list.length);\n    if (this.state.card_list.lenght !== 0 && localStorage.getItem(\"restored\") === \"true\") this.saveState();\n    if (this.state.pair_left === 0 || this.state.loose === true) return this.endGame();else return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          donne: this.state.card_list,\n          onClick: fruit => this.clickOnCard(fruit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(this.TimerLinearProgress, {\n          variant: \"determinate\",\n          value: this.state.percent * 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.setState({\n          pair_left: 0\n        }),\n        children: \"END GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(InfoDisplay, {\n        user: this.state.user,\n        game: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 6\n    }, this);\n  }\n\n}\n/**\n * \t<ProgressBar width={800} percent={this.state.percent}/>\n * \n */\n\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js"],"names":["Board","InfoDisplay","React","img_loader","Button","ProgressBar","LinearProgress","withStyles","API","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Memory","Component","constructor","props","updateProgress","field","val","setState","name","load_cards","bind","state","card_list","nb_pair","location","data","pair_left","locked","flipped","percent","time_left","loose","timer","user","startTimer","countDown","clickOnCard","close_cards","TimerLinearProgress","root","height","marginTop","borderRadius","colorPrimary","backgroundColor","bar","transition","componentDidMount","res","getUserInfo","startGame","localStorage","getItem","restoreGame","console","log","setItem","restoreList","order_list","visible_list","load_list","split","map","key","ndx","findIndex","f","k","parseInt","visible","shift","push","endGame","removeItem","sendScore","test_match","flip","getFruit","id","updateFruit","fruit","lst","getFruitIndex","ft","forEach","clearTimeout","match","setTimeout","nb_pair_to_load","fruits","dup","elem","cards","setInterval","seconds_left","clearInterval","saveState","toString","card_order","card","render","lenght"],"mappings":"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","sourcesContent":["import './Memory.css';\nimport Board from '../Board/Board.js'\nimport InfoDisplay from \"../InfoDisplay/InfoDisplay.js\"\nimport React from 'react';\nimport img_loader from './images/images'\nimport {Button} from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\"\nimport {LinearProgress} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport API from \"../../utils/API.js\"\n//mélange de facon aléatoire le tableau passé en entrée\nfunction shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n//TODO  Add Start timer on first click\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\";\n\t\tthis.load_cards = this.load_cards.bind(this);\n\t\tthis.state = {\n\t\t\tcard_list: [],\n\t\t\tnb_pair: this.props.location.data,\n\t\t\tpair_left: -1,\n\t\t\tlocked: false,\n\t\t\tflipped: [],\n\t\t\tpercent: 1,\n\t\t\ttime_left: 180,\n\t\t\tloose: false,\n\t\t\ttimer: null,\n\t\t\tuser: {},\n\t\t};\n\t\tthis.startTimer = this.startTimer.bind(this);\n\t\tthis.countDown = this.countDown.bind(this);\n\t\tthis.clickOnCard.bind(this);\n\t\tthis.close_cards = this.close_cards.bind(this);\n\t\tthis.TimerLinearProgress = withStyles(() => ({\n\t\t\troot: {\n\t\t\t  height: 20,\n\t\t\t  marginTop: 30,\n\t\t\t  borderRadius: 5,\n\t\t\t},\n\t\t\tcolorPrimary: {\n\t\t\t  backgroundColor: \"#ABCDEF\",\n\t\t\t},\n\t\t\tbar: {\n\t\t\t  borderRadius: 5,\n\t\t\t  backgroundColor: '#1a90ff',\n\t\t\t  transition: \"5s ease\",\n\t\t\t},\n\n\t\t}))(LinearProgress);\n\t}\n\tasync componentDidMount()\n\t{\n\t\tconst res = await API.getUserInfo();\n\t\t{res && this.setState({user: res.data})}\n\t\tthis.startGame();\n\t}\n\t//Game state\n\tstartGame()\n\t{\n\t\tif (true && localStorage.getItem(\"running\") === \"true\")\n\t\t{\n\t\t\tthis.restoreGame();\n\t\t\treturn;\n\t\t}\n\t\tconsole.log(\"START GAME\");\n\t\tthis.setState({\n\t\t\tloose: false,\n\t\t\tcard_list: this.load_cards(this.state.nb_pair),\n\t\t\ttime_left: 180,\n\t\t\tpercent: 1,\n\t\t}, ()=>{this.setState({\n\t\t\tpair_left: this.state.card_list.length / 2,\n\n\t\t})});\n\t\tconsole.log(\"AFTER: \" + this.state.pair_left);\n\t\tthis.startTimer();\n\t\tlocalStorage.setItem(\"running\", \"true\");\n\t}\n\trestoreList()\n\t{\n\t\tconst order_list = localStorage.getItem(\"card_list_order\");\n\t\tconsole.log(\"orderlist:\");\n\t\tconsole.log(order_list);\n\t\tconst visible_list = localStorage.getItem(\"card_list_visible\");\n\n\t\tconst load_list = this.load_cards(this.state.nb_pair);\n\t\tvar card_list = [];\n\t\torder_list.split(\",\").map((key) => {\n\t\t\tconsole.log(\"key = \" + key)\n\t\t\tconst ndx = load_list.findIndex((f) => f.k === parseInt(key));\n\t\t\tif (visible_list.length > 0 && parseInt(key) === visible_list[0])\n\t\t\t{\n\t\t\t\tload_list[ndx].visible = true;\n\t\t\t\tvisible_list.shift();\n\t\t\t}\n\t\t\tconsole.log(\"Push \" + load_list[ndx]);\n\t\t\tcard_list.push(load_list[ndx]);\n\t\t})\n\t\tconsole.log(\"Load list::\");\n\t\tconsole.log(card_list);\n\t\treturn card_list;\n\t}\n\trestoreGame()\n\t{\n\t\tthis.setState({\n\t\t\tloose: false,\n\t\t\tpercent: 1,\n\t\t\ttime_left: localStorage.getItem(\"time_left\"),\n\t\t\tpair_left: localStorage.getItem(\"pair_left\"),\n\t\t\tnb_pair: localStorage.getItem(\"nb_pair\"),\n\t\t}, this.setState({card_list: this.restoreList(),}));\n\t\tlocalStorage(\"restored\", \"true\");\n\t}\n\tendGame()\n\t{\n\t\t//fin du jeu redi\n\t\tlocalStorage.removeItem(\"running\");\n\t\tconst res = (this.state.pair_left === 0 ? \"win\" : \"loose\" );\n\t\tAPI.sendScore(res);\n\t\treturn null;\n\t}\n\n\tsendScore(res)\n\t{\n\t\tAPI.sendScore(res);\n\t}\n\t//Jeu\n\ttest_match(flip)\n\t{\n\t\tif (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit à changer\n\t\tconst ndx = this.getFruitIndex((f) => f.k === fruit.k);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\n\tgetFruitIndex(ft)\n\t{\n\t\treturn this.state.card_list.findIndex(ft);\n\t}\n\tgetFruit(ndx)\n\t{\n\t\treturn this.state.card_list[ndx];\n\t}\n\tclose_cards(flip, timer)\n\t{\n\t\tconsole.log(\"gF\" + this);\n\t\t//cache les cartes visibles\n\t\tflip.forEach((ndx)=> {\n\t\t\tconsole.log(\"hide ndx:\" + ndx);\n\t\t\tconst fruit = this.getFruit(ndx);\n\t\t\tfruit.visible = false;\n\t\t\tthis.updateFruit(fruit);\n\t\t});\n\t\tthis.setState({flipped: [], locked: false});\n\t\tclearTimeout(timer);\n\t}\n\n\tmatch()\n\t{\n\t\t// reset\n\t\tthis.setState({\n\t\t\tpair_left: this.state.pair_left - 1,\n\t\t\tflipped: []});\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\tconst flip = [...this.state.flipped];\n\t\tif (fruit.visible || this.state.locked)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\t//set fruit visible\n\t\tfruit.visible = true;\n\t\tthis.updateFruit(fruit);\n\t\t//save flipped card\n\t\tflip.push(this.getFruitIndex((f) => f.k === fruit.k));\n\t\t//if pair is flipped\n\t\tif (flip.length === 2)\n\t\t{\n\t\t\tif (this.test_match(flip) === true)\n\t\t\t{\n\t\t\t\tthis.match();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//set timer for keeping cards visible before hidding\n\t\t\t\tthis.setState({locked: true});\n\t\t\t\tvar timer = setTimeout(this.close_cards, 500, flip, timer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthis.setState({flipped: flip});\n\n\t\tconsole.log(\"quit click\");\n\t}\n\n\tload_cards(nb_pair_to_load)\n\t{\n\t\tconsole.log(this.state);\n\t\tconsole.log(\"Nb pair receive:\" + this.state.nb_pair);\n\t\tconst fruits = img_loader(nb_pair_to_load);\n\t\tconsole.log(\"Nb fruit Loaded:\" + fruits.length);\n\t\tlet dup = [];\n\t\t//fill dup with a copy a fruits\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\t//set l'id pour chaque fruit\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\t//cards == fruits + dup\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn shuffle(cards);\n\t}\n//Timer\n\tstartTimer() {\n\t\t  this.setState({timer:  setInterval(this.countDown, 1000)}, () => {\n\t\t\tconsole.log(\"START TIMER: \" + this.state.timer);\n\t\t  });\n\t\t}\n\tcountDown() {\n\t\t// Remove one second, set state so a re-render happens.\n\t\tlet seconds_left = this.state.time_left - 1;\n\t\tconsole.log(this.state.pair_left);\n\t\tconsole.log(this.state.card_list);\n\t\tconsole.log(\"-timeleft:\" + seconds_left);\n\t\tthis.setState({\n\t\t  time_left: seconds_left,\n\t\t  percent: this.state.time_left / 180,\n\t\t});\n\t\t// Check if we're at zero.\n\t\tif (seconds_left === 0) {\n\t\t\tconsole.log(\"TIME'S UP !!!!!\");\n\t\t\tthis.setState({loose: true});\n\t\t\tclearInterval(this.state.timer);\n\t\t}\n\t  }\n\tsaveState()\n\t{\n\t\tlocalStorage.setItem(\"pair_left\", this.state.pair_left.toString());\n\t\tlocalStorage.setItem(\"time_left\", this.state.time_left.toString());\n\t\tconst card_list = this.state.card_list;\n\t\tlet visible = [];\n\t\tlet card_order = [];\n\t\tconsole.log(card_list);\n\t\tcard_list.map((card)=>{\n\t\t\tcard_order.push(card.key);\n\t\t\tif (card.visible === true)\n\t\t\t{\n\t\t\t\tvisible.push(this.getFruitIndex((f) => f.k === card.k).toString())\n\t\t\t}\n\t\t});\n\t\tconsole.log(\"list visible:\" + visible);\n\t\tlocalStorage.setItem(\"card_list_visible\", visible);\n\t\tlocalStorage.setItem(\"card_list_order\", card_order);\n\t}\n//ProgressBar\n\tupdateProgress = (field, val) => {\n\t\tthis.setState({ [field]: val });\n\t};\n\n\trender(){\n\t\t//console.log(\"paire restante: \" + this.state.pair_left);\n\t\t//console.log(\"game status: \" + this.state.loose);\n\t\t// to init pair_left\n\t\tconsole.log(\"cardlist size =\" + this.state.card_list.length);\n\t\tif (this.state.card_list.lenght !== 0 && localStorage.getItem(\"restored\") === \"true\")\n\t\t\tthis.saveState();\n\t\tif (this.state.pair_left === 0 || this.state.loose === true)\n\t\t\treturn this.endGame();\n\t\telse\n\t\t\treturn (\n\t\t\t\t\t<div className=\"game_field\">\n\t\t\t\t\t\t<div className=\"board\">\n\t    \t\t    \t\t<Board donne={this.state.card_list} onClick={(fruit) => this.clickOnCard(fruit)}/>\n\t\t\t\t\t\t\t<this.TimerLinearProgress variant=\"determinate\" value={this.state.percent * 100} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Button onClick={() => this.setState({pair_left: 0})} >END GAME</Button>\n\n\t\t\t\t\t\t<InfoDisplay user={this.state.user} game={this.state}/>\n\t\t\t\t    </div>\t\t\n\t\t\t\t)};\n\n}\n/**\n * \t<ProgressBar width={800} percent={this.state.percent}/>\n * \n */\nexport default Memory;"]},"metadata":{},"sourceType":"module"}