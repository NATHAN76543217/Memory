{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Board.js\";\nimport Square from './Square';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\n\nfunction DispCase({\n  fruit,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(Square, {\n    fruit: fruit,\n    onClick: () => onClick(fruit)\n  }, fruit.k, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n}\n\n_c = DispCase;\n\nfunction FormRow({\n  start,\n  row_size,\n  donne,\n  onClick\n}) {\n  var row = [];\n\n  for (let i = start; i < start + row_size; i++) {\n    row.push( /*#__PURE__*/_jsxDEV(DispCase, {\n      fruit: donne[i],\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: \"auto\",\n    spacing: 2,\n    direction: \"row\",\n    children: row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = FormRow;\nFormRow.defaultProps = {};\nFormRow.propTypes = {\n  start: PropTypes.number\n};\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction Board({\n  donne,\n  onClick\n}) {\n  const col_size = Math.ceil(Math.sqrt(donne.length));\n  console.log(\"col size = \" + col_size);\n  console.log(\"donne lenght = \" + donne.length);\n  const grid = [];\n  let i = 0;\n\n  for (; i < col_size - 1; i++) {\n    grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n      donne: donne,\n      start: i * col_size,\n      row_size: col_size,\n      onClick: onClick\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this));\n    console.log(\"new row \" + i);\n  }\n\n  console.log(\"after loop: i=\" + i + \" et col_size = \" + col_size);\n  grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n    donne: donne,\n    start: i * col_size,\n    row_size: donne.length - i * col_size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: \"auto\",\n    spacing: 1,\n    direction: \"column\",\n    children: grid\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n}\n\n_c3 = Board;\nexport default Board;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DispCase\");\n$RefreshReg$(_c2, \"FormRow\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Board.js"],"names":["Square","Grid","PropTypes","DispCase","fruit","onClick","k","FormRow","start","row_size","donne","row","i","push","defaultProps","propTypes","number","shuffleArray","array","length","j","Math","floor","random","temp","shuffle","currentIndex","temporaryValue","randomIndex","Board","col_size","ceil","sqrt","console","log","grid"],"mappings":"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","sourcesContent":["import Square from './Square'\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types'\n\n\nfunction DispCase({fruit, onClick})\n{\n\treturn (\n\t\t<Square key={fruit.k} fruit={fruit} onClick={() => onClick(fruit)}/> \n\t);\n}\nfunction FormRow({start, row_size, donne, onClick}) {\n\n    var row = [];\n    for (let i = start; i < start + row_size; i++)\n    {\n\t  row.push(<DispCase fruit={donne[i]} onClick={onClick} />)\n    }\n\treturn (\n\t\t<Grid container item xs=\"auto\" spacing={2} direction='row'>\n\t\t{row}\n\t\t</Grid>\n\t);\n}\nFormRow.defaultProps = {\n\n}\nFormRow.propTypes = {\n\tstart: PropTypes.number,\n}\nfunction shuffleArray(array) {\n\tlet i = array.length - 1;\n\tfor (; i > 0; i--) {\n\t  const j = Math.floor(Math.random() * (i + 1));\n\t  const temp = array[i];\n\t  array[i] = array[j];\n\t  array[j] = temp;\n\t}\n\treturn array;\n  }\n  function shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n\nfunction Board({donne, onClick})\n{\n\tconst col_size = Math.ceil(Math.sqrt(donne.length));\n\tconsole.log(\"col size = \" + col_size);\n\tconsole.log(\"donne lenght = \" + donne.length);\n\tconst grid = [];\n\tlet i = 0;\n\tfor (; i < col_size - 1; i++)\n\t{\n\t\tgrid.push(<FormRow key={i} donne={donne} start={i * col_size} row_size={col_size} onClick={onClick}/>);\n\t\tconsole.log(\"new row \"+ i);\n\t}\n\tconsole.log(\"after loop: i=\" + i + \" et col_size = \" + col_size);\n\tgrid.push(<FormRow donne={donne} start={i * col_size} row_size={donne.length - (i * col_size)}/> )\n\treturn (\n\t\t    <Grid container item xs=\"auto\" spacing={1} direction='column'>\n                {grid}\n\t\t\t</Grid>\n        );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}