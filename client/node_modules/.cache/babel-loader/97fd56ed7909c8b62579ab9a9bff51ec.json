{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js\";\nimport './Memory.css';\nimport Board from '../Board/Board.js';\nimport InfoDisplay from \"../InfoDisplay/InfoDisplay.js\";\nimport React from 'react';\nimport img_loader from './images/images';\nimport { Button } from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\";\nimport { LinearProgress } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport API from \"../../utils/API.js\"; //mélange de facon aléatoire le tableau passé en entrée\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n} //TODO  Add Start timer on first click\n\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateProgress = (field, val) => {\n      this.setState({\n        [field]: val\n      });\n    };\n\n    this.name = \"Memory\";\n    this.load_cards = this.load_cards.bind(this);\n    this.state = {\n      card_list: {},\n      nb_pair: this.props.location.data,\n      pair_left: -1,\n      locked: false,\n      flipped: [],\n      percent: 1,\n      time_left: 180,\n      game_state: null,\n      timer: null,\n      user: {}\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.clickOnCard.bind(this);\n    this.close_cards = this.close_cards.bind(this);\n    this.TimerLinearProgress = withStyles(() => ({\n      root: {\n        height: 20,\n        marginTop: 30,\n        borderRadius: 5\n      },\n      colorPrimary: {\n        backgroundColor: \"#ABCDEF\"\n      },\n      bar: {\n        borderRadius: 5,\n        backgroundColor: '#1a90ff',\n        transition: \"5s ease\"\n      }\n    }))(LinearProgress);\n  }\n\n  async componentDidMount() {\n    const res = await API.getUserInfo();\n    {\n      res && this.setState({\n        user: res.data\n      });\n    }\n    this.startGame();\n  } //Game state\n\n\n  startGame() {\n    console.log(\"Before: \" + this.state.card_list);\n    console.log(\"START GAME\");\n    this.setState({\n      game_state: 0,\n      card_list: this.load_cards(),\n      pair_left: this.state.card_list.length / 2,\n      time_left: 180,\n      percent: 1\n    });\n    console.log(\"AFTER: \" + this.state.pair_left);\n    this.startTimer();\n  }\n\n  endGame() {\n    //fin du jeu redi\n    const res = this.state.pair_left === 0 ? \"win\" : \"loose\";\n    API.sendScore(res);\n    return null;\n  }\n  /*\n  loosing()\n  {\n  \tconsole.log(\"before: \" + this.state.timer);\n  \tclearInterval(this.state.timer);\n  \tconsole.log(\"after: \" + this.state.timer);\n  \tthis.sendScore(\"loose\");\n  \treturn (\n  \t<div className=\"loose\">\n  \t\t<h1>You loose...</h1>\n  \t\t<Button onClick={() => this.startGame()} block>\n  \t\tRetry?\n  \t\t</Button>\n  \t</div>);\n  }\n  \twinning()\n  {\n  \tif (this.state.game_state !== 1)\n  \t{\n  \t\tthis.setState({game_state: 1});\n  \t\tclearInterval(this.state.timer);\n  \t\tconsole.log(\" res timer= \" + this.timer);\n  \t\tthis.sendScore(\"win\");\n  \t\t}\n  \treturn (\n  \t<div className=\"loose\">\n  \t\t<h1>You WIN</h1>\n  \t\t<Button onClick={() => this.startGame()} block>\n  \t\t\tRetry?\n  \t\t</Button>\n  \t</div>);\n  }*/\n\n\n  sendScore(res) {\n    API.sendScore(res);\n  } //Jeu\n\n\n  test_match(flip) {\n    if (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit à changer\n\n    const ndx = this.getFruitIndex(fruit); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getFruitIndex(fruit) {\n    return this.state.card_list.findIndex(f => f.k === fruit.k);\n  }\n\n  getFruit(ndx) {\n    return this.state.card_list[ndx];\n  }\n\n  close_cards(flip, timer) {\n    console.log(\"gF\" + this); //cache les cartes visibles\n\n    flip.forEach(ndx => {\n      console.log(\"hide ndx:\" + ndx);\n      const fruit = this.getFruit(ndx);\n      fruit.visible = false;\n      this.updateFruit(fruit);\n    });\n    this.setState({\n      flipped: [],\n      locked: false\n    });\n    clearTimeout(timer);\n  }\n\n  match() {\n    // reset\n    this.setState({\n      pair_left: this.state.pair_left - 1,\n      flipped: []\n    });\n  }\n\n  clickOnCard(fruit) {\n    const flip = [...this.state.flipped];\n    if (fruit.visible || this.state.locked) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id); //set fruit visible\n\n    fruit.visible = true;\n    this.updateFruit(fruit); //save flipped card\n\n    flip.push(this.getFruitIndex(fruit)); //if pair is flipped\n\n    if (flip.length === 2) {\n      if (this.test_match(flip) === true) {\n        this.match();\n      } else {\n        //set timer for keeping cards visible before hidding\n        this.setState({\n          locked: true\n        });\n        var timer = setTimeout(this.close_cards, 500, flip, timer);\n      }\n    } else this.setState({\n      flipped: flip\n    });\n\n    console.log(\"quit click\");\n  }\n\n  load_cards() {\n    console.log(this.state);\n    console.log(\"Nb pair receive:\" + this.state.nb_pair);\n    const fruits = img_loader(this.state.nb_pair);\n    console.log(\"Nb fruit Loaded:\" + fruits.length);\n    let dup = []; //fill dup with a copy a fruits\n\n    fruits.forEach(f => dup.push({ ...f\n    })); //set l'id pour chaque fruit\n\n    dup.forEach(elem => elem.k = elem.id + dup.length); //cards == fruits + dup\n\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return shuffle(cards);\n  } //Timer\n\n\n  startTimer() {\n    this.setState({\n      timer: setInterval(this.countDown, 1000)\n    }, () => {\n      console.log(\"START TIMER: \" + this.state.timer);\n    });\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds_left = this.state.time_left - 1;\n    console.log(this.state.pair_left);\n    console.log(this.state.card_list);\n    console.log(\"-timeleft:\" + seconds_left);\n    this.setState({\n      time_left: seconds_left,\n      percent: this.state.time_left / 180\n    }); // Check if we're at zero.\n\n    if (seconds_left === 0) {\n      console.log(\"TIME'S UP !!!!!\");\n      this.setState({\n        game_state: -1\n      });\n      clearInterval(this.state.timer);\n    }\n  }\n\n  render() {\n    //console.log(\"paire restante: \" + this.state.pair_left);\n    //console.log(\"game status: \" + this.state.game_state);\n    // to init pair_left\n    if (this.state.pair_left === 0 || this.state.game_state === -1) return this.endGame();else return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          donne: this.state.card_list,\n          onClick: fruit => this.clickOnCard(fruit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(this.TimerLinearProgress, {\n          variant: \"determinate\",\n          value: this.state.percent * 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.setState({\n          pair_left: 0\n        }),\n        children: \"END GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(InfoDisplay, {\n        user: this.state.user,\n        game: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 6\n    }, this);\n  }\n\n}\n/**\n * \t<ProgressBar width={800} percent={this.state.percent}/>\n * \n */\n\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js"],"names":["Board","InfoDisplay","React","img_loader","Button","ProgressBar","LinearProgress","withStyles","API","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Memory","Component","constructor","props","updateProgress","field","val","setState","name","load_cards","bind","state","card_list","nb_pair","location","data","pair_left","locked","flipped","percent","time_left","game_state","timer","user","startTimer","countDown","clickOnCard","close_cards","TimerLinearProgress","root","height","marginTop","borderRadius","colorPrimary","backgroundColor","bar","transition","componentDidMount","res","getUserInfo","startGame","console","log","endGame","sendScore","test_match","flip","getFruit","id","updateFruit","fruit","lst","ndx","getFruitIndex","findIndex","f","k","forEach","visible","clearTimeout","match","push","setTimeout","fruits","dup","elem","cards","setInterval","seconds_left","clearInterval","render"],"mappings":";;AAAA,OAAO,cAAP;AACA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAAQC,MAAR,QAAqB,iBAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,GAAP,MAAgB,oBAAhB,C,CACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACvB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MAAiCC,cAAjC;AAAA,MAAiDC,WAAjD,CADuB,CAGvB;;AACA,SAAO,MAAMH,YAAb,EAA2B;AAEzB;AACAG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB,CAJyB,CAMzB;;AACAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AAED,SAAOH,KAAP;AACE,C,CACH;;;AAEA,MAAMQ,MAAN,SAAqBhB,KAAK,CAACiB,SAA3B,CACA;AACCC,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;;AADD,SAqOAC,cArOA,GAqOiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAChC,WAAKC,QAAL,CAAc;AAAE,SAACF,KAAD,GAASC;AAAX,OAAd;AACA,KAvOD;;AAEC,SAAKE,IAAL,GAAY,QAAZ;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,EADC;AAEZC,MAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWW,QAAX,CAAoBC,IAFjB;AAGZC,MAAAA,SAAS,EAAE,CAAC,CAHA;AAIZC,MAAAA,MAAM,EAAE,KAJI;AAKZC,MAAAA,OAAO,EAAE,EALG;AAMZC,MAAAA,OAAO,EAAE,CANG;AAOZC,MAAAA,SAAS,EAAE,GAPC;AAQZC,MAAAA,UAAU,EAAE,IARA;AASZC,MAAAA,KAAK,EAAE,IATK;AAUZC,MAAAA,IAAI,EAAE;AAVM,KAAb;AAYA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBd,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKe,SAAL,GAAiB,KAAKA,SAAL,CAAef,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKgB,WAAL,CAAiBhB,IAAjB,CAAsB,IAAtB;AACA,SAAKiB,WAAL,GAAmB,KAAKA,WAAL,CAAiBjB,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKkB,mBAAL,GAA2BvC,UAAU,CAAC,OAAO;AAC5CwC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE,EADJ;AAEJC,QAAAA,SAAS,EAAE,EAFP;AAGJC,QAAAA,YAAY,EAAE;AAHV,OADsC;AAM5CC,MAAAA,YAAY,EAAE;AACZC,QAAAA,eAAe,EAAE;AADL,OAN8B;AAS5CC,MAAAA,GAAG,EAAE;AACHH,QAAAA,YAAY,EAAE,CADX;AAEHE,QAAAA,eAAe,EAAE,SAFd;AAGHE,QAAAA,UAAU,EAAE;AAHT;AATuC,KAAP,CAAD,CAAV,CAevBhD,cAfuB,CAA3B;AAgBA;;AACD,QAAMiD,iBAAN,GACA;AACC,UAAMC,GAAG,GAAG,MAAMhD,GAAG,CAACiD,WAAJ,EAAlB;AACA;AAACD,MAAAA,GAAG,IAAI,KAAK/B,QAAL,CAAc;AAACgB,QAAAA,IAAI,EAAEe,GAAG,CAACvB;AAAX,OAAd,CAAP;AAAuC;AACxC,SAAKyB,SAAL;AACA,GA5CF,CA6CC;;;AACAA,EAAAA,SAAS,GACT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAa,KAAK/B,KAAL,CAAWC,SAApC;AACC6B,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,SAAKnC,QAAL,CAAc;AACbc,MAAAA,UAAU,EAAE,CADC;AAEbT,MAAAA,SAAS,EAAE,KAAKH,UAAL,EAFE;AAGbO,MAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWC,SAAX,CAAqBlB,MAArB,GAA8B,CAH5B;AAIb0B,MAAAA,SAAS,EAAE,GAJE;AAKbD,MAAAA,OAAO,EAAE;AALI,KAAd;AAOAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAY,KAAK/B,KAAL,CAAWK,SAAnC;AACA,SAAKQ,UAAL;AACA;;AACDmB,EAAAA,OAAO,GACP;AACC;AACA,UAAML,GAAG,GAAI,KAAK3B,KAAL,CAAWK,SAAX,KAAyB,CAAzB,GAA6B,KAA7B,GAAqC,OAAlD;AACA1B,IAAAA,GAAG,CAACsD,SAAJ,CAAcN,GAAd;AACA,WAAO,IAAP;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGCM,EAAAA,SAAS,CAACN,GAAD,EACT;AACChD,IAAAA,GAAG,CAACsD,SAAJ,CAAcN,GAAd;AACA,GAxGF,CAyGC;;;AACAO,EAAAA,UAAU,CAACC,IAAD,EACV;AACC,QAAI,KAAKC,QAAL,CAAcD,IAAI,CAAC,CAAD,CAAlB,EAAuBE,EAAvB,KAA8B,KAAKD,QAAL,CAAcD,IAAI,CAAC,CAAD,CAAlB,EAAuBE,EAAzD,EACA;AACCP,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aAAO,IAAP;AACA;;AACDD,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAO,KAAP;AAEA;;AACDO,EAAAA,WAAW,CAACC,KAAD,EACX;AACC;AACA,UAAMC,GAAG,GAAG,CAAC,GAAG,KAAKxC,KAAL,CAAWC,SAAf,CAAZ,CAFD,CAGC;;AACA,UAAMwC,GAAG,GAAG,KAAKC,aAAL,CAAmBH,KAAnB,CAAZ,CAJD,CAKC;;AACAC,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWF,KAAX,CAND,CAOC;;AACA,SAAK3C,QAAL,CAAc;AAACK,MAAAA,SAAS,EAAEuC;AAAZ,KAAd;AACA;;AAEDE,EAAAA,aAAa,CAACH,KAAD,EACb;AACC,WAAO,KAAKvC,KAAL,CAAWC,SAAX,CAAqB0C,SAArB,CAA+BC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQN,KAAK,CAACM,CAAlD,CAAP;AACA;;AACDT,EAAAA,QAAQ,CAACK,GAAD,EACR;AACC,WAAO,KAAKzC,KAAL,CAAWC,SAAX,CAAqBwC,GAArB,CAAP;AACA;;AACDzB,EAAAA,WAAW,CAACmB,IAAD,EAAOxB,KAAP,EACX;AACCmB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAO,IAAnB,EADD,CAEC;;AACAI,IAAAA,IAAI,CAACW,OAAL,CAAcL,GAAD,IAAQ;AACpBX,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcU,GAA1B;AACA,YAAMF,KAAK,GAAG,KAAKH,QAAL,CAAcK,GAAd,CAAd;AACAF,MAAAA,KAAK,CAACQ,OAAN,GAAgB,KAAhB;AACA,WAAKT,WAAL,CAAiBC,KAAjB;AACA,KALD;AAMA,SAAK3C,QAAL,CAAc;AAACW,MAAAA,OAAO,EAAE,EAAV;AAAcD,MAAAA,MAAM,EAAE;AAAtB,KAAd;AACA0C,IAAAA,YAAY,CAACrC,KAAD,CAAZ;AACA;;AAEDsC,EAAAA,KAAK,GACL;AACC;AACA,SAAKrD,QAAL,CAAc;AACbS,MAAAA,SAAS,EAAE,KAAKL,KAAL,CAAWK,SAAX,GAAuB,CADrB;AAEbE,MAAAA,OAAO,EAAE;AAFI,KAAd;AAGA;;AACDQ,EAAAA,WAAW,CAACwB,KAAD,EACX;AACC,UAAMJ,IAAI,GAAG,CAAC,GAAG,KAAKnC,KAAL,CAAWO,OAAf,CAAb;AACA,QAAIgC,KAAK,CAACQ,OAAN,IAAiB,KAAK/C,KAAL,CAAWM,MAAhC,EACC;AACDwB,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBQ,KAAK,CAACM,CAA5B,GAAgC,SAAhC,GAA4CN,KAAK,CAACF,EAA9D,EAJD,CAKC;;AACAE,IAAAA,KAAK,CAACQ,OAAN,GAAgB,IAAhB;AACA,SAAKT,WAAL,CAAiBC,KAAjB,EAPD,CAQC;;AACAJ,IAAAA,IAAI,CAACe,IAAL,CAAU,KAAKR,aAAL,CAAmBH,KAAnB,CAAV,EATD,CAUC;;AACA,QAAIJ,IAAI,CAACpD,MAAL,KAAgB,CAApB,EACA;AACC,UAAI,KAAKmD,UAAL,CAAgBC,IAAhB,MAA0B,IAA9B,EACA;AACC,aAAKc,KAAL;AACA,OAHD,MAKA;AACC;AACA,aAAKrD,QAAL,CAAc;AAACU,UAAAA,MAAM,EAAE;AAAT,SAAd;AACA,YAAIK,KAAK,GAAGwC,UAAU,CAAC,KAAKnC,WAAN,EAAmB,GAAnB,EAAwBmB,IAAxB,EAA8BxB,KAA9B,CAAtB;AACA;AACD,KAZD,MAcC,KAAKf,QAAL,CAAc;AAACW,MAAAA,OAAO,EAAE4B;AAAV,KAAd;;AAEDL,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA;;AAEDjC,EAAAA,UAAU,GACV;AACCgC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAjB;AACA8B,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,KAAK/B,KAAL,CAAWE,OAA5C;AACA,UAAMkD,MAAM,GAAG9E,UAAU,CAAC,KAAK0B,KAAL,CAAWE,OAAZ,CAAzB;AACA4B,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBqB,MAAM,CAACrE,MAAxC;AACA,QAAIsE,GAAG,GAAG,EAAV,CALD,CAMC;;AACAD,IAAAA,MAAM,CAACN,OAAP,CAAeF,CAAC,IACfS,GAAG,CAACH,IAAJ,CAAS,EAAC,GAAGN;AAAJ,KAAT,CADD,EAPD,CASC;;AACAS,IAAAA,GAAG,CAACP,OAAJ,CAAYQ,IAAI,IAAIA,IAAI,CAACT,CAAL,GAASS,IAAI,CAACjB,EAAL,GAAUgB,GAAG,CAACtE,MAA3C,EAVD,CAWC;;AACA,UAAMwE,KAAK,GAAG,CAAC,GAAGH,MAAJ,EAAY,GAAGC,GAAf,CAAd;AACAvB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBwB,KAAK,CAACxE,MAA1B,GAAmC,QAA/C;AACA+C,IAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ;AACA,WAAO3E,OAAO,CAAC2E,KAAD,CAAd;AACA,GA9MF,CA+MC;;;AACA1C,EAAAA,UAAU,GAAG;AACV,SAAKjB,QAAL,CAAc;AAACe,MAAAA,KAAK,EAAG6C,WAAW,CAAC,KAAK1C,SAAN,EAAiB,IAAjB;AAApB,KAAd,EAA2D,MAAM;AAClEgB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,KAAK/B,KAAL,CAAWW,KAAzC;AACE,KAFD;AAGD;;AACFG,EAAAA,SAAS,GAAG;AACX;AACA,QAAI2C,YAAY,GAAG,KAAKzD,KAAL,CAAWS,SAAX,GAAuB,CAA1C;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAL,CAAWK,SAAvB;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAL,CAAWC,SAAvB;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAe0B,YAA3B;AACA,SAAK7D,QAAL,CAAc;AACZa,MAAAA,SAAS,EAAEgD,YADC;AAEZjD,MAAAA,OAAO,EAAE,KAAKR,KAAL,CAAWS,SAAX,GAAuB;AAFpB,KAAd,EANW,CAUX;;AACA,QAAIgD,YAAY,KAAK,CAArB,EAAwB;AACvB3B,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAKnC,QAAL,CAAc;AAACc,QAAAA,UAAU,EAAE,CAAC;AAAd,OAAd;AACAgD,MAAAA,aAAa,CAAC,KAAK1D,KAAL,CAAWW,KAAZ,CAAb;AACA;AACC;;AAMHgD,EAAAA,MAAM,GAAE;AACP;AACA;AACA;AACA,QAAI,KAAK3D,KAAL,CAAWK,SAAX,KAAyB,CAAzB,IAA8B,KAAKL,KAAL,CAAWU,UAAX,KAA0B,CAAC,CAA7D,EACC,OAAO,KAAKsB,OAAL,EAAP,CADD,KAGC,oBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACO,QAAC,KAAD;AAAO,UAAA,KAAK,EAAE,KAAKhC,KAAL,CAAWC,SAAzB;AAAoC,UAAA,OAAO,EAAGsC,KAAD,IAAW,KAAKxB,WAAL,CAAiBwB,KAAjB;AAAxD;AAAA;AAAA;AAAA;AAAA,gBADP,eAEC,aAAM,mBAAN;AAA0B,UAAA,OAAO,EAAC,aAAlC;AAAgD,UAAA,KAAK,EAAE,KAAKvC,KAAL,CAAWQ,OAAX,GAAqB;AAA5E;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAKC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKZ,QAAL,CAAc;AAACS,UAAAA,SAAS,EAAE;AAAZ,SAAd,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALD,eAOC,QAAC,WAAD;AAAa,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWY,IAA9B;AAAoC,QAAA,IAAI,EAAE,KAAKZ;AAA/C;AAAA;AAAA;AAAA;AAAA,cAPD;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUG;;AA5PN;AA+PA;AACA;AACA;AACA;;;AACA,eAAeX,MAAf","sourcesContent":["import './Memory.css';\nimport Board from '../Board/Board.js'\nimport InfoDisplay from \"../InfoDisplay/InfoDisplay.js\"\nimport React from 'react';\nimport img_loader from './images/images'\nimport {Button} from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\"\nimport {LinearProgress} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport API from \"../../utils/API.js\"\n//mélange de facon aléatoire le tableau passé en entrée\nfunction shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n//TODO  Add Start timer on first click\n\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\";\n\t\tthis.load_cards = this.load_cards.bind(this);\n\t\tthis.state = {\n\t\t\tcard_list: {},\n\t\t\tnb_pair: this.props.location.data,\n\t\t\tpair_left: -1,\n\t\t\tlocked: false,\n\t\t\tflipped: [],\n\t\t\tpercent: 1,\n\t\t\ttime_left: 180,\n\t\t\tgame_state: null,\n\t\t\ttimer: null,\n\t\t\tuser: {},\n\t\t};\n\t\tthis.startTimer = this.startTimer.bind(this);\n\t\tthis.countDown = this.countDown.bind(this);\n\t\tthis.clickOnCard.bind(this);\n\t\tthis.close_cards = this.close_cards.bind(this);\n\t\tthis.TimerLinearProgress = withStyles(() => ({\n\t\t\troot: {\n\t\t\t  height: 20,\n\t\t\t  marginTop: 30,\n\t\t\t  borderRadius: 5,\n\t\t\t},\n\t\t\tcolorPrimary: {\n\t\t\t  backgroundColor: \"#ABCDEF\",\n\t\t\t},\n\t\t\tbar: {\n\t\t\t  borderRadius: 5,\n\t\t\t  backgroundColor: '#1a90ff',\n\t\t\t  transition: \"5s ease\",\n\t\t\t},\n\n\t\t}))(LinearProgress);\n\t}\n\tasync componentDidMount()\n\t{\n\t\tconst res = await API.getUserInfo();\n\t\t{res && this.setState({user: res.data})}\n\t\tthis.startGame();\n\t}\n\t//Game state\n\tstartGame()\n\t{\n\tconsole.log(\"Before: \" + this.state.card_list);\n\t\tconsole.log(\"START GAME\");\n\t\tthis.setState({\n\t\t\tgame_state: 0,\n\t\t\tcard_list: this.load_cards(),\n\t\t\tpair_left: this.state.card_list.length / 2,\n\t\t\ttime_left: 180,\n\t\t\tpercent: 1,\n\t\t});\n\t\tconsole.log(\"AFTER: \" + this.state.pair_left);\n\t\tthis.startTimer();\n\t}\n\tendGame()\n\t{\n\t\t//fin du jeu redi\n\t\tconst res = (this.state.pair_left === 0 ? \"win\" : \"loose\" );\n\t\tAPI.sendScore(res);\n\t\treturn null;\n\t}\n\t/*\n\tloosing()\n\t{\n\t\tconsole.log(\"before: \" + this.state.timer);\n\t\tclearInterval(this.state.timer);\n\t\tconsole.log(\"after: \" + this.state.timer);\n\t\tthis.sendScore(\"loose\");\n\t\treturn (\n\t\t<div className=\"loose\">\n\t\t\t<h1>You loose...</h1>\n\t\t\t<Button onClick={() => this.startGame()} block>\n\t\t\tRetry?\n\t\t\t</Button>\n\t\t</div>);\n\t}\n\n\twinning()\n\t{\n\t\tif (this.state.game_state !== 1)\n\t\t{\n\t\t\tthis.setState({game_state: 1});\n\t\t\tclearInterval(this.state.timer);\n\t\t\tconsole.log(\" res timer= \" + this.timer);\n\t\t\tthis.sendScore(\"win\");\n\n\t\t}\n\t\treturn (\n\t\t<div className=\"loose\">\n\t\t\t<h1>You WIN</h1>\n\t\t\t<Button onClick={() => this.startGame()} block>\n\t\t\t\tRetry?\n\t\t\t</Button>\n\t\t</div>);\n\t}*/\n\tsendScore(res)\n\t{\n\t\tAPI.sendScore(res);\n\t}\n\t//Jeu\n\ttest_match(flip)\n\t{\n\t\tif (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit à changer\n\t\tconst ndx = this.getFruitIndex(fruit);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\n\tgetFruitIndex(fruit)\n\t{\n\t\treturn this.state.card_list.findIndex(f => f.k === fruit.k);\n\t}\n\tgetFruit(ndx)\n\t{\n\t\treturn this.state.card_list[ndx];\n\t}\n\tclose_cards(flip, timer)\n\t{\n\t\tconsole.log(\"gF\" + this);\n\t\t//cache les cartes visibles\n\t\tflip.forEach((ndx)=> {\n\t\t\tconsole.log(\"hide ndx:\" + ndx);\n\t\t\tconst fruit = this.getFruit(ndx);\n\t\t\tfruit.visible = false;\n\t\t\tthis.updateFruit(fruit);\n\t\t});\n\t\tthis.setState({flipped: [], locked: false});\n\t\tclearTimeout(timer);\n\t}\n\n\tmatch()\n\t{\n\t\t// reset\n\t\tthis.setState({\n\t\t\tpair_left: this.state.pair_left - 1,\n\t\t\tflipped: []});\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\tconst flip = [...this.state.flipped];\n\t\tif (fruit.visible || this.state.locked)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\t//set fruit visible\n\t\tfruit.visible = true;\n\t\tthis.updateFruit(fruit);\n\t\t//save flipped card\n\t\tflip.push(this.getFruitIndex(fruit));\n\t\t//if pair is flipped\n\t\tif (flip.length === 2)\n\t\t{\n\t\t\tif (this.test_match(flip) === true)\n\t\t\t{\n\t\t\t\tthis.match();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//set timer for keeping cards visible before hidding\n\t\t\t\tthis.setState({locked: true});\n\t\t\t\tvar timer = setTimeout(this.close_cards, 500, flip, timer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthis.setState({flipped: flip});\n\n\t\tconsole.log(\"quit click\");\n\t}\n\n\tload_cards()\n\t{\n\t\tconsole.log(this.state);\n\t\tconsole.log(\"Nb pair receive:\" + this.state.nb_pair);\n\t\tconst fruits = img_loader(this.state.nb_pair);\n\t\tconsole.log(\"Nb fruit Loaded:\" + fruits.length);\n\t\tlet dup = [];\n\t\t//fill dup with a copy a fruits\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\t//set l'id pour chaque fruit\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\t//cards == fruits + dup\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn shuffle(cards);\n\t}\n\t//Timer\n\tstartTimer() {\n\t\t  this.setState({timer:  setInterval(this.countDown, 1000)}, () => {\n\t\t\tconsole.log(\"START TIMER: \" + this.state.timer);\n\t\t  });\n\t\t}\n\tcountDown() {\n\t\t// Remove one second, set state so a re-render happens.\n\t\tlet seconds_left = this.state.time_left - 1;\n\t\tconsole.log(this.state.pair_left);\n\t\tconsole.log(this.state.card_list);\n\t\tconsole.log(\"-timeleft:\" + seconds_left);\n\t\tthis.setState({\n\t\t  time_left: seconds_left,\n\t\t  percent: this.state.time_left / 180,\n\t\t});\n\t\t// Check if we're at zero.\n\t\tif (seconds_left === 0) {\n\t\t\tconsole.log(\"TIME'S UP !!!!!\");\n\t\t\tthis.setState({game_state: -1});\n\t\t\tclearInterval(this.state.timer);\n\t\t}\n\t  }\n\t\n\tupdateProgress = (field, val) => {\n\t\tthis.setState({ [field]: val });\n\t};\n\n\trender(){\n\t\t//console.log(\"paire restante: \" + this.state.pair_left);\n\t\t//console.log(\"game status: \" + this.state.game_state);\n\t\t// to init pair_left\n\t\tif (this.state.pair_left === 0 || this.state.game_state === -1)\n\t\t\treturn this.endGame();\n\t\telse\n\t\t\treturn (\n\t\t\t\t\t<div className=\"game_field\">\n\t\t\t\t\t\t<div className=\"board\">\n\t    \t\t    \t\t<Board donne={this.state.card_list} onClick={(fruit) => this.clickOnCard(fruit)}/>\n\t\t\t\t\t\t\t<this.TimerLinearProgress variant=\"determinate\" value={this.state.percent * 100} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Button onClick={() => this.setState({pair_left: 0})} >END GAME</Button>\n\n\t\t\t\t\t\t<InfoDisplay user={this.state.user} game={this.state}/>\n\t\t\t\t    </div>\t\t\n\t\t\t\t)};\n\n}\n/**\n * \t<ProgressBar width={800} percent={this.state.percent}/>\n * \n */\nexport default Memory;"]},"metadata":{},"sourceType":"module"}