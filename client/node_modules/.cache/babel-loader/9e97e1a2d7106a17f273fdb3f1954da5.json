{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Square from './Square';\nimport img_loader from './images';\nimport PropTypes from 'prop-types';\n\nfunction Disp_case({\n  fruit,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(Square, {\n    fruit: fruit,\n    onClick: onClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Disp_case;\n\nfunction FormRow({\n  start,\n  row_size,\n  donne,\n  onClick\n}) {\n  var row = [];\n\n  for (let i = start; i < start + row_size; i++) {\n    row.push( /*#__PURE__*/_jsxDEV(Disp_case, {\n      fruit: donne[i],\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this));\n    console.log(\"fill row with:\" + i);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: \"auto\",\n    spacing: 2,\n    direction: \"row\",\n    children: row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = FormRow;\nFormRow.defaultProps = {};\nFormRow.propTypes = {\n  start: PropTypes.number\n};\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction Board({\n  donne,\n  onClick\n}) {\n  const col_size = Math.ceil(Math.sqrt(donne.length));\n  console.log(\"col size = \" + col_size);\n  const grid = [];\n  let i = 0;\n\n  for (; i < col_size + 1; i++) {\n    grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n      donne: donne,\n      start: i * col_size,\n      row_size: col_size,\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this));\n    console.log(\"new row\");\n  }\n\n  grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n    donne: donne,\n    start: i * col_size,\n    row_size: donne.length - i * col_size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 12\n  }, this));\n  return grid;\n}\n\n_c3 = Board;\n\nclass Memory extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      card_list: img_loader(),\n      nb_row: 5,\n      nb_col: 6\n    };\n  }\n\n  clickOnCard(i) {\n    console.log(i); //\t\tthis.state.card_list[i].visible = true;\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    const cards = [];\n    let i = 0;\n    fruits.map(fruit => {\n      cards.push();\n      cards.push( /*#__PURE__*/_jsxDEV(Square, {\n        fruit: fruit,\n        onClick: i => this.clickOnCard(i)\n      }, i++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 16\n      }, this));\n      return;\n    });\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(\"last key aloued:\" + i);\n    return shuffle(cards); //\t\treturn cards;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: \"auto\",\n        spacing: 1,\n        direction: \"column\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          donne: this.state.card_list,\n          onClick: this.clickOnCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Disp_case\");\n$RefreshReg$(_c2, \"FormRow\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["React","Grid","Square","img_loader","PropTypes","Disp_case","fruit","onClick","FormRow","start","row_size","donne","row","i","push","console","log","defaultProps","propTypes","number","shuffleArray","array","length","j","Math","floor","random","temp","shuffle","currentIndex","temporaryValue","randomIndex","Board","col_size","ceil","sqrt","grid","Memory","Component","constructor","state","card_list","nb_row","nb_col","clickOnCard","load_cards","fruits","cards","map","render"],"mappings":"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","sourcesContent":["import './Memory.css';\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Square from './Square'\nimport img_loader from './images'\nimport PropTypes from 'prop-types'\n\n\nfunction Disp_case({fruit, onClick})\n{\n\treturn (\n\t\t<Square fruit={fruit} onClick={onClick}/> \n\t)\n}\nfunction FormRow({start, row_size, donne, onClick}) {\n\n    var row = [];\n    for (let i = start; i < start + row_size; i++)\n    {\n\t  row.push(<Disp_case fruit={donne[i]} onClick={onClick}/>)\n\t\tconsole.log(\"fill row with:\" + i);\n    }\n\treturn (\n\t\t<Grid container item xs=\"auto\" spacing={2} direction='row'>\n\t\t{row}\n\t\t</Grid>\n\t);\n}\nFormRow.defaultProps = {\n\n}\nFormRow.propTypes = {\n\tstart: PropTypes.number,\n}\nfunction shuffleArray(array) {\n\tlet i = array.length - 1;\n\tfor (; i > 0; i--) {\n\t  const j = Math.floor(Math.random() * (i + 1));\n\t  const temp = array[i];\n\t  array[i] = array[j];\n\t  array[j] = temp;\n\t}\n\treturn array;\n  }\n  function shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n\nfunction Board({donne, onClick})\n{\n\tconst col_size = Math.ceil(Math.sqrt(donne.length));\n\tconsole.log(\"col size = \" + col_size);\n\tconst grid = [];\n\tlet i = 0;\n\tfor (; i < col_size + 1; i++)\n\t{\n\t\tgrid.push(<FormRow donne={donne} start={i * col_size} row_size={col_size} onClick={onClick}/>);\n\t\tconsole.log(\"new row\");\n\t}\n\tgrid.push(<FormRow donne={donne} start={i * col_size} row_size={donne.length - (i * col_size)}/> )\n\treturn (grid);\n}\n\nclass Memory extends React.Component\n{\n  constructor()\n  {\n\tsuper();\n\tthis.state = {\n\t\tcard_list: img_loader(),\n\t\tnb_row: 5,\n\t\tnb_col: 6,\n\t};\n  }\n  clickOnCard(i)\n  {\n\t  console.log(i);\n//\t\tthis.state.card_list[i].visible = true;\n  }\n\n  load_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tconst cards = [];\n\t\tlet i = 0;\n\t\tfruits.map((fruit)=> {\n\t\t\t\tcards.push();\n\t\t\t\tcards.push(<Square key={i++} fruit={fruit} onClick={(i) => this.clickOnCard(i)}/>);\n\t\t\t\treturn;\n\t\t});\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(\"last key aloued:\" + i);\n\t\treturn shuffle(cards);\n//\t\treturn cards;\n}\n\n  render(){\n\treturn (\n\t\t<div className=\"game_field\">\n\t\t\t<Grid container item xs=\"auto\" spacing={1} direction='column'>\n    \t    \t<Board donne={this.state.card_list} onClick={this.clickOnCard}/>\n\t\t\t</Grid>\n\t\t</div>\n\t\t)}\n}\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/"]},"metadata":{},"sourceType":"module"}