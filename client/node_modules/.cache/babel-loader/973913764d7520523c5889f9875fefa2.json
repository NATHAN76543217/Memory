{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport Board from './Board';\nimport React from 'react';\nimport img_loader from './images';\nimport PropTypes from 'prop-types';\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      card_list: this.load_cards(),\n      flipped: [],\n      nb_row: 5,\n      nb_col: 6\n    };\n    this.clickOnCard.bind(this);\n  }\n\n  clickOnCard(fruit) {\n    if (!fruit.visible) {\n      const lst = this.state.card_list.slice();\n      const ndx = lst.findIndex(f => f.k === fruit.k);\n      lst[ndx].visible = true;\n      console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n      this.setState({\n        card_list: lst,\n        flipped: [this.state.flipped, fruit]\n      });\n    }\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    let dup = [];\n    fruits.forEach(f => dup.push({ ...f\n    }));\n    dup.forEach(elem => elem.k = elem.id + dup.length);\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return cards; //\t\treturn cards;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        donne: this.state.card_list,\n        onClick: i => this.clickOnCard(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["Board","React","img_loader","PropTypes","Memory","Component","constructor","props","state","card_list","load_cards","flipped","nb_row","nb_col","clickOnCard","bind","fruit","visible","lst","slice","ndx","findIndex","f","k","console","log","id","setState","fruits","dup","forEach","push","elem","length","cards","render","i"],"mappings":";;AAAA,OAAO,cAAP;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,UAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAIA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CACA;AACEC,EAAAA,WAAW,CAACC,KAAD,EACX;AACD,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,KAAKC,UAAL,EADC;AAEZC,MAAAA,OAAO,EAAE,EAFG;AAGZC,MAAAA,MAAM,EAAE,CAHI;AAIZC,MAAAA,MAAM,EAAE;AAJI,KAAb;AAMA,SAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB;AACE;;AAEHD,EAAAA,WAAW,CAACE,KAAD,EACT;AACD,QAAI,CAACA,KAAK,CAACC,OAAX,EACE;AACD,YAAMC,GAAG,GAAG,KAAKV,KAAL,CAAWC,SAAX,CAAqBU,KAArB,EAAZ;AACA,YAAMC,GAAG,GAAGF,GAAG,CAACG,SAAJ,CAAcC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQP,KAAK,CAACO,CAAjC,CAAZ;AACAL,MAAAA,GAAG,CAACE,GAAD,CAAH,CAASH,OAAT,GAAmB,IAAnB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBT,KAAK,CAACO,CAA5B,GAAgC,SAAhC,GAA4CP,KAAK,CAACU,EAA9D;AACA,WAAKC,QAAL,CAAc;AACblB,QAAAA,SAAS,EAAES,GADE;AAEbP,QAAAA,OAAO,EAAE,CAAC,KAAKH,KAAL,CAAWG,OAAZ,EAAqBK,KAArB;AAFI,OAAd;AAIA;AAED;;AAECN,EAAAA,UAAU,GACX;AACC,UAAMkB,MAAM,GAAG1B,UAAU,EAAzB;AACA,QAAI2B,GAAG,GAAG,EAAV;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAeR,CAAC,IACfO,GAAG,CAACE,IAAJ,CAAS,EAAC,GAAGT;AAAJ,KAAT,CADD;AAEAO,IAAAA,GAAG,CAACC,OAAJ,CAAYE,IAAI,IAAIA,IAAI,CAACT,CAAL,GAASS,IAAI,CAACN,EAAL,GAAUG,GAAG,CAACI,MAA3C;AACA,UAAMC,KAAK,GAAG,CAAC,GAAGN,MAAJ,EAAY,GAAGC,GAAf,CAAd;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBS,KAAK,CAACD,MAA1B,GAAmC,QAA/C;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACA,WAAOA,KAAP,CATD,CAUD;AACC;;AAECC,EAAAA,MAAM,GAAE;AACT,wBACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACQ,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE,KAAK3B,KAAL,CAAWC,SAAzB;AAAoC,QAAA,OAAO,EAAG2B,CAAD,IAAO,KAAKtB,WAAL,CAAiBsB,CAAjB;AAApD;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,YADD;AAIG;;AAhDJ;;AAkDA,eAAehC,MAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './Memory.css';\nimport Board from './Board'\nimport React from 'react';\nimport img_loader from './images'\nimport PropTypes from 'prop-types'\n\n\n\nclass Memory extends React.Component\n{\n  constructor(props)\n  {\n\tsuper(props);\n\tthis.state = {\n\t\tcard_list: this.load_cards(),\n\t\tflipped: [],\n\t\tnb_row: 5,\n\t\tnb_col: 6,\n\t};\n\tthis.clickOnCard.bind(this);\n  }\n  \nclickOnCard(fruit)\n  {\n\tif (!fruit.visible)\n  \t{\n\t\tconst lst = this.state.card_list.slice(); \n\t\tconst ndx = lst.findIndex(f => f.k === fruit.k);\n\t\tlst[ndx].visible = true;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\tthis.setState({\n\t\t\tcard_list: lst,\n\t\t\tflipped: [this.state.flipped, fruit],\n\t\t})\n\t}\n\n}\n\n  load_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tlet dup = [];\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn cards;\n//\t\treturn cards;\n}\n\n  render(){\n\treturn (\n\t\t<div className=\"game_field\">\n    \t    \t<Board donne={this.state.card_list} onClick={(i) => this.clickOnCard(i)}/>\n\t\t</div>\n\t\t)}\n}\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/"]},"metadata":{},"sourceType":"module"}