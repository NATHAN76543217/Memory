{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js\";\nimport './Memory.css';\nimport Board from '../Board/Board.js';\nimport InfoDisplay from \"../InfoDisplay/InfoDisplay.js\";\nimport React from 'react';\nimport img_loader from './images/images';\nimport { Button } from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\";\nimport API from \"../../utils/API.js\"; //mélange de facon aléatoire le tableau passé en entrée\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n} //TODO  Add Start timer on first click\n//TODO passer data par bouton retry\n//TODO a chaque de debut de partie re crée un token\n//TODO ajouter redirection d'user si arrive sur page log ou signin vers le menu\n\n\nclass Memory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.name = \"Memory\";\n    this.load_cards = this.load_cards.bind(this);\n    this.state = {\n      card_list: [],\n      nb_pair: this.props.location.data,\n      pair_left: -1,\n      locked: false,\n      flipped: [],\n      percent: 1,\n      time_left: 0,\n      total_time: 0,\n      timer: null,\n      timeout: false,\n      user: {}\n    };\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.clickOnCard.bind(this);\n    this.close_cards = this.close_cards.bind(this);\n  }\n\n  async componentDidMount() {\n    const res = await API.getUserInfo();\n    {\n      res && this.setState({\n        user: res.data\n      });\n    }\n    this.startGame();\n  } //Game state\n\n\n  startGame() {\n    if (localStorage.getItem(\"running\") === \"true\") {\n      console.log(\"RESTORE GAME\");\n\n      if (this.restoreGame() === -1) {\n        console.log(\"RESTORE NOT FOUND\");\n        localStorage.setItem(\"running\", false);\n        this.startGame();\n      }\n\n      return;\n    }\n\n    console.log(\"START GAME\");\n    const total_time = this.state.nb_pair * 10;\n    setTimeout(() => {\n      console.log(\"World!\");\n    }, 40000);\n    this.setState({\n      timeout: false,\n      card_list: this.load_cards(this.state.nb_pair),\n      time_left: total_time,\n      total_time: total_time,\n      percent: 1\n    }, () => {\n      this.setState({\n        pair_left: this.state.card_list.length / 2\n      });\n    });\n    console.log(\"AFTER: \" + this.state.pair_left);\n    localStorage.setItem(\"running\", \"true\");\n    API.updateToken();\n  }\n\n  restoreList() {\n    //liste de l'ordre des key\n    const order_list = localStorage.getItem(\"card_list_order\");\n    console.log(\"orderlist:\");\n    console.log(order_list); //liste des key a rendre visible\n\n    const visible_list = localStorage.getItem(\"card_list_visible\").split(\",\");\n    const nb_pair = parseInt(localStorage.getItem(\"nb_pair\")); //liste des\n\n    console.log(\"RESTORE V:\" + visible_list);\n    const load_list = this.load_cards(nb_pair);\n    var card_list = [];\n    order_list.split(\",\").forEach(key => {\n      console.log(\"key = \" + key);\n      const ndx = load_list.findIndex(f => f.k === parseInt(key));\n      if (visible_list.indexOf(key) > -1) load_list[ndx].visible = true;\n      card_list.push(load_list[ndx]);\n    });\n    console.log(\"Load list::\");\n    console.log(card_list);\n    return card_list;\n  }\n\n  restoreGame() {\n    //restaure la partie au dernier état enregistré en cas de refresh de la page\n    //verifier l'état des variable du stockage local\n    const nb_pair_left = parseInt(localStorage.getItem(\"pair_left\"));\n    const nb_pair = parseInt(localStorage.getItem(\"nb_pair\"));\n    const time_left = parseInt(localStorage.getItem(\"time_left\"));\n    if (nb_pair_left == null || nb_pair_left === 0 || time_left == null || time_left === 0) return -1;\n    const listSet = this.restoreList();\n    const total_time = nb_pair * 10;\n    this.setState({\n      card_list: listSet,\n      pair_left: nb_pair_left,\n      nb_pair: nb_pair,\n      percent: time_left / total_time,\n      timeout: false,\n      time_left: time_left,\n      total_time: total_time\n    });\n    return;\n  }\n\n  endGame() {\n    //fin du jeu redi\n    localStorage.removeItem(\"running\");\n    const result = this.state.pair_left === 0 ? \"win\" : \"loose\";\n    const time_elapsed = this.state.total_time - this.state.time_left;\n    API.sendScore(result, time_elapsed);\n    return null;\n  } //Jeu\n\n\n  test_match(flip) {\n    if (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id) {\n      console.log(\"Match!\");\n      return true;\n    }\n\n    console.log(\"No__ match\");\n    return false;\n  }\n\n  updateFruit(fruit) {\n    //récup une copie de liste de fruit\n    const lst = [...this.state.card_list]; //récupere l'index du fruit à changer\n\n    const ndx = this.getFruitIndex(f => f.k === fruit.k); //met a jour le fruit dans la liste\n\n    lst[ndx] = fruit; //update state\n\n    this.setState({\n      card_list: lst\n    });\n  }\n\n  getFruitIndex(ft) {\n    return this.state.card_list.findIndex(ft);\n  }\n\n  getFruit(ndx) {\n    return this.state.card_list[ndx];\n  }\n\n  close_cards(flip, timer) {\n    console.log(\"gF\" + this); //cache les cartes visibles\n\n    flip.forEach(ndx => {\n      console.log(\"hide ndx:\" + ndx);\n      const fruit = this.getFruit(ndx);\n      fruit.visible = false;\n      this.updateFruit(fruit);\n    });\n    this.setState({\n      flipped: [],\n      locked: false\n    });\n    clearTimeout(timer);\n  }\n\n  match() {\n    // reset\n    this.setState({\n      pair_left: this.state.pair_left - 1,\n      flipped: []\n    });\n  }\n\n  clickOnCard(fruit) {\n    //if first click\n    if (this.state.timer === null) this.startTimer();\n    const flip = [...this.state.flipped];\n    if (fruit.visible || this.state.locked) return;\n    console.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id); //set fruit visible\n\n    fruit.visible = true;\n    this.updateFruit(fruit); //save flipped card\n\n    flip.push(this.getFruitIndex(f => f.k === fruit.k)); //if pair is flipped\n\n    if (flip.length === 2) {\n      if (this.test_match(flip) === true) {\n        this.match();\n      } else {\n        //set timer for keeping cards visible before hidding\n        this.setState({\n          locked: true\n        });\n        var timer = setTimeout(this.close_cards, 500, flip, timer);\n      }\n    } else this.setState({\n      flipped: flip\n    });\n\n    console.log(\"quit click\");\n  }\n\n  load_cards(nb_pair_to_load) {\n    console.log(\"Nb pair receive:\" + nb_pair_to_load);\n    const fruits = img_loader(nb_pair_to_load);\n    console.log(\"Nb fruit Loaded:\" + fruits.length);\n    let dup = []; //fill dup with a copy a fruits\n\n    fruits.forEach(f => dup.push({ ...f\n    })); //set l'id pour chaque fruit\n\n    dup.forEach(elem => elem.k = elem.id + dup.length); //cards == fruits + dup\n\n    const cards = [...fruits, ...dup];\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(cards);\n    return shuffle(cards);\n  } //Timer\n\n\n  startTimer() {\n    this.setState({\n      timer: setInterval(this.countDown, 1000)\n    }, () => {\n      console.log(\"START TIMER: \" + this.state.timer);\n    });\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds_left = this.state.time_left - 1;\n    {\n      seconds_left % 10 === 0 && console.log(\"-timeleft:\" + seconds_left);\n    }\n    this.setState({\n      time_left: seconds_left,\n      percent: this.state.time_left / this.state.total_time\n    }); // Check if we're at zero.\n\n    if (seconds_left === 0) {\n      console.log(\"TIME'S UP !!!!!\");\n      this.setState({\n        timeout: true\n      });\n      clearInterval(this.state.timer);\n    }\n  }\n\n  saveState() {\n    const card_list = this.state.card_list;\n    let visible = [];\n    let card_order = [];\n    card_list.map(card => {\n      card_order.push(card.k);\n\n      if (card.visible === true && this.state.flipped.includes(this.getFruitIndex(f => f.k === card.k)) === false) {\n        visible.push(card.k);\n      }\n    }); //console.log(\"STORE V:\" + visible);\n\n    localStorage.setItem(\"card_list_visible\", visible);\n    localStorage.setItem(\"card_list_order\", card_order);\n    localStorage.setItem(\"nb_pair\", this.state.nb_pair);\n    localStorage.setItem(\"pair_left\", this.state.pair_left.toString());\n    localStorage.setItem(\"time_left\", this.state.time_left.toString());\n  }\n\n  render() {\n    //console.log(\"paire restante: \" + this.state.pair_left);\n    //console.log(\"game status: \" + this.state.timeout);\n    // to init pair_left\n    console.log(\"cardlist size =\" + this.state.card_list.length);\n    if (this.state.card_list.lenght !== 0 && this.state.pair_left !== -1) this.saveState();\n    if (this.state.pair_left === 0 || this.state.timeout === true) return this.endGame();else return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          donne: this.state.card_list,\n          onClick: fruit => this.clickOnCard(fruit)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n          variant: \"determinate\",\n          value: this.state.percent * 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.setState({\n          pair_left: 0\n        }),\n        children: \"WIN GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => this.setState({\n          time_left: 1\n        }),\n        children: \"LOOSE GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(InfoDisplay, {\n        user: this.state.user,\n        game: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 6\n    }, this);\n  }\n\n}\n\nexport default Memory;","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/client/src/components/Memory/Memory.js"],"names":["Board","InfoDisplay","React","img_loader","Button","ProgressBar","API","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Memory","Component","constructor","props","name","load_cards","bind","state","card_list","nb_pair","location","data","pair_left","locked","flipped","percent","time_left","total_time","timer","timeout","user","startTimer","countDown","clickOnCard","close_cards","componentDidMount","res","getUserInfo","setState","startGame","localStorage","getItem","console","log","restoreGame","setItem","setTimeout","updateToken","restoreList","order_list","visible_list","split","parseInt","load_list","forEach","key","ndx","findIndex","f","k","indexOf","visible","push","nb_pair_left","listSet","endGame","removeItem","result","time_elapsed","sendScore","test_match","flip","getFruit","id","updateFruit","fruit","lst","getFruitIndex","ft","clearTimeout","match","nb_pair_to_load","fruits","dup","elem","cards","setInterval","seconds_left","clearInterval","saveState","card_order","map","card","includes","toString","render","lenght"],"mappings":"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","sourcesContent":["import './Memory.css';\nimport Board from '../Board/Board.js'\nimport InfoDisplay from \"../InfoDisplay/InfoDisplay.js\"\nimport React from 'react';\nimport img_loader from './images/images'\nimport {Button} from 'react-bootstrap';\nimport ProgressBar from \"../ProgressBar/ProgressBar.js\"\nimport API from \"../../utils/API.js\"\n//mélange de facon aléatoire le tableau passé en entrée\nfunction shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n//TODO  Add Start timer on first click\n//TODO passer data par bouton retry\n//TODO a chaque de debut de partie re crée un token\n//TODO ajouter redirection d'user si arrive sur page log ou signin vers le menu\nclass Memory extends React.Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.name = \"Memory\";\n\t\tthis.load_cards = this.load_cards.bind(this);\n\t\tthis.state = {\n\t\t\tcard_list: [],\n\t\t\tnb_pair: this.props.location.data,\n\t\t\tpair_left: -1,\n\t\t\tlocked: false,\n\t\t\tflipped: [],\n\t\t\tpercent: 1,\n\t\t\ttime_left: 0,\n\t\t\ttotal_time: 0,\n\t\t\ttimer: null,\n\t\t\ttimeout: false,\n\t\t\tuser: {},\n\t\t};\n\t\tthis.startTimer = this.startTimer.bind(this);\n\t\tthis.countDown = this.countDown.bind(this);\n\t\tthis.clickOnCard.bind(this);\n\t\tthis.close_cards = this.close_cards.bind(this);\n\t}\n\tasync componentDidMount()\n\t{\n\t\tconst res = await API.getUserInfo();\n\t\t{res && this.setState({user: res.data})}\n\t\tthis.startGame();\n\t}\n\t//Game state\n\tstartGame()\n\t{\n\t\tif (localStorage.getItem(\"running\") === \"true\")\n\t\t{\n\t\t\tconsole.log(\"RESTORE GAME\");\n\t\t\tif (this.restoreGame() === -1)\n\t\t\t{\n\t\t\t\tconsole.log(\"RESTORE NOT FOUND\");\n\t\t\t\tlocalStorage.setItem(\"running\", false);\n\t\t\t\tthis.startGame();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconsole.log(\"START GAME\");\n\t\tconst total_time = this.state.nb_pair * 10;\n\t\tsetTimeout(() => {  console.log(\"World!\"); }, 40000);\n\t\tthis.setState({\n\t\t\ttimeout: false,\n\t\t\tcard_list: this.load_cards(this.state.nb_pair),\n\t\t\ttime_left: total_time,\n\t\t\ttotal_time: total_time,\n\t\t\tpercent: 1,\n\t\t}, ()=>{this.setState({\n\t\t\tpair_left: this.state.card_list.length / 2,\n\n\t\t})});\n\t\tconsole.log(\"AFTER: \" + this.state.pair_left);\n\t\tlocalStorage.setItem(\"running\", \"true\");\n\t\tAPI.updateToken();\n\t}\n\trestoreList()\n\t{\n\t\t//liste de l'ordre des key\n\t\tconst order_list = localStorage.getItem(\"card_list_order\");\n\t\tconsole.log(\"orderlist:\");\n\t\tconsole.log(order_list);\n\t\t//liste des key a rendre visible\n\t\tconst visible_list = localStorage.getItem(\"card_list_visible\").split(\",\");\n\t\tconst nb_pair = parseInt(localStorage.getItem(\"nb_pair\"));\n\t\t//liste des\n\t\tconsole.log(\"RESTORE V:\" + visible_list);\n\t\tconst load_list = this.load_cards(nb_pair);\n\t\tvar card_list = [];\n\t\torder_list.split(\",\").forEach((key) => {\n\t\t\tconsole.log(\"key = \" + key)\n\t\t\tconst ndx = load_list.findIndex((f) => f.k === parseInt(key));\n\t\t\tif (visible_list.indexOf(key) > -1)\n\t\t\t\tload_list[ndx].visible = true;\n\t\t\tcard_list.push(load_list[ndx]);\n\t\t})\n\t\tconsole.log(\"Load list::\");\n\t\tconsole.log(card_list);\n\t\treturn card_list;\n\t}\n\trestoreGame()\n\t{\n\t\t//restaure la partie au dernier état enregistré en cas de refresh de la page\n\t\t//verifier l'état des variable du stockage local\n\t\tconst nb_pair_left = parseInt(localStorage.getItem(\"pair_left\"));\n\t\tconst nb_pair = parseInt(localStorage.getItem(\"nb_pair\"));\n\t\tconst time_left = parseInt(localStorage.getItem(\"time_left\"));\n\t\tif (nb_pair_left == null || nb_pair_left === 0 || time_left == null || time_left === 0)\n\t\t\treturn -1;\n\t\tconst listSet = this.restoreList();\n\t\tconst total_time = nb_pair * 10;\n\t\tthis.setState({\n\t\t\tcard_list: listSet,\n\t\t\tpair_left: (nb_pair_left),\n\t\t\tnb_pair: (nb_pair),\n\t\t\tpercent: time_left / total_time,\n\t\t\ttimeout: false,\n\t\t\ttime_left: time_left,\n\t\t\ttotal_time: total_time,\n\t\t});\n\t\treturn;\n\t}\n\tendGame()\n\t{\n\t\t//fin du jeu redi\n\t\tlocalStorage.removeItem(\"running\");\n\t\tconst result = (this.state.pair_left === 0 ? \"win\" : \"loose\" );\n\t\tconst time_elapsed = this.state.total_time - this.state.time_left;\n\t\tAPI.sendScore(result, time_elapsed);\n\t\treturn null;\n\t}\n\n\t//Jeu\n\ttest_match(flip)\n\t{\n\t\tif (this.getFruit(flip[0]).id === this.getFruit(flip[1]).id)\n\t\t{\n\t\t\tconsole.log(\"Match!\");\n\t\t\treturn true;\n\t\t}\n\t\tconsole.log(\"No__ match\");\n\t\treturn false;\n\t\t\n\t}\n\tupdateFruit(fruit)\n\t{\n\t\t//récup une copie de liste de fruit\n\t\tconst lst = [...this.state.card_list];\n\t\t//récupere l'index du fruit à changer\n\t\tconst ndx = this.getFruitIndex((f) => f.k === fruit.k);\n\t\t//met a jour le fruit dans la liste\n\t\tlst[ndx] = fruit;\n\t\t//update state\n\t\tthis.setState({card_list: lst})\n\t}\n\n\tgetFruitIndex(ft)\n\t{\n\t\treturn this.state.card_list.findIndex(ft);\n\t}\n\tgetFruit(ndx)\n\t{\n\t\treturn this.state.card_list[ndx];\n\t}\n\tclose_cards(flip, timer)\n\t{\n\t\tconsole.log(\"gF\" + this);\n\t\t//cache les cartes visibles\n\t\tflip.forEach((ndx)=> {\n\t\t\tconsole.log(\"hide ndx:\" + ndx);\n\t\t\tconst fruit = this.getFruit(ndx);\n\t\t\tfruit.visible = false;\n\t\t\tthis.updateFruit(fruit);\n\t\t});\n\t\tthis.setState({flipped: [], locked: false});\n\t\tclearTimeout(timer);\n\t}\n\n\tmatch()\n\t{\n\t\t// reset\n\t\tthis.setState({\n\t\t\tpair_left: this.state.pair_left - 1,\n\t\t\tflipped: []});\n\t}\n\tclickOnCard(fruit)\n\t{\n\t\t//if first click\n\t\tif (this.state.timer === null)\n\t\t\tthis.startTimer();\n\t\tconst flip = [...this.state.flipped];\n\t\tif (fruit.visible || this.state.locked)\n\t\t\treturn;\n\t\tconsole.log(\"set visible: key=\" + fruit.k + \" et id=\" + fruit.id);\n\t\t//set fruit visible\n\t\tfruit.visible = true;\n\t\tthis.updateFruit(fruit);\n\t\t//save flipped card\n\t\tflip.push(this.getFruitIndex((f) => f.k === fruit.k));\n\t\t//if pair is flipped\n\t\tif (flip.length === 2)\n\t\t{\n\t\t\tif (this.test_match(flip) === true)\n\t\t\t{\n\t\t\t\tthis.match();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//set timer for keeping cards visible before hidding\n\t\t\t\tthis.setState({locked: true});\n\t\t\t\tvar timer = setTimeout(this.close_cards, 500, flip, timer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthis.setState({flipped: flip});\n\n\t\tconsole.log(\"quit click\");\n\t}\n\n\tload_cards(nb_pair_to_load)\n\t{\n\t\tconsole.log(\"Nb pair receive:\" + nb_pair_to_load);\n\t\tconst fruits = img_loader(nb_pair_to_load);\n\t\tconsole.log(\"Nb fruit Loaded:\" + fruits.length);\n\t\tlet dup = [];\n\t\t//fill dup with a copy a fruits\n\t\tfruits.forEach(f => \n\t\t\tdup.push({...f}));\n\t\t//set l'id pour chaque fruit\n\t\tdup.forEach(elem => elem.k = elem.id + dup.length);\n\t\t//cards == fruits + dup\n\t\tconst cards = [...fruits, ...dup];\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(cards);\n\t\treturn shuffle(cards);\n\t}\n//Timer\n\tstartTimer() {\n\t\t  this.setState({timer:  setInterval(this.countDown, 1000)}, () => {\n\t\t\tconsole.log(\"START TIMER: \" + this.state.timer);\n\t\t  });\n\t\t}\n\tcountDown() {\n\t\t// Remove one second, set state so a re-render happens.\n\t\tlet seconds_left = this.state.time_left - 1;\n\t\t{seconds_left % 10 === 0 && console.log(\"-timeleft:\" + seconds_left)}\t\n\t\tthis.setState({\n\t\t  time_left: seconds_left,\n\t\t  percent: this.state.time_left / this.state.total_time,\n\t\t});\n\t\t// Check if we're at zero.\n\t\tif (seconds_left === 0) {\n\t\t\tconsole.log(\"TIME'S UP !!!!!\");\n\t\t\tthis.setState({timeout: true});\n\t\t\tclearInterval(this.state.timer);\n\t\t}\n\t  }\n\tsaveState()\n\t{\n\t\tconst card_list = this.state.card_list;\n\t\tlet visible = [];\n\t\tlet card_order = [];\n\t\tcard_list.map((card)=>{\n\t\t\tcard_order.push(card.k);\n\t\t\tif (card.visible === true && this.state.flipped.includes(this.getFruitIndex((f) => f.k === card.k)) === false)\n\t\t\t{\n\t\t\t\tvisible.push(card.k);\n\t\t\t}\n\t\t});\n\t\t//console.log(\"STORE V:\" + visible);\n\t\tlocalStorage.setItem(\"card_list_visible\", visible);\n\t\tlocalStorage.setItem(\"card_list_order\", card_order);\n\t\tlocalStorage.setItem(\"nb_pair\", this.state.nb_pair);\n\t\tlocalStorage.setItem(\"pair_left\", this.state.pair_left.toString());\n\t\tlocalStorage.setItem(\"time_left\", this.state.time_left.toString());\n\t}\n\trender(){\n\t\t//console.log(\"paire restante: \" + this.state.pair_left);\n\t\t//console.log(\"game status: \" + this.state.timeout);\n\t\t// to init pair_left\n\t\tconsole.log(\"cardlist size =\" + this.state.card_list.length);\n\t\tif (this.state.card_list.lenght !== 0 && this.state.pair_left !== -1)\n\t\t\tthis.saveState();\n\t\tif (this.state.pair_left === 0 || this.state.timeout === true)\n\t\t\treturn this.endGame();\n\t\telse\n\t\t\treturn (\n\t\t\t\t\t<div className=\"game_field\">\n\t\t\t\t\t\t<div className=\"board\">\n\t    \t\t    \t\t<Board donne={this.state.card_list} onClick={(fruit) => this.clickOnCard(fruit)}/>\n\t\t\t\t\t\t\t<ProgressBar variant=\"determinate\" value={this.state.percent * 100}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Button onClick={() => this.setState({pair_left: 0})} >WIN GAME</Button>\n\t\t\t\t\t\t<Button onClick={() => this.setState({time_left: 1})} >LOOSE GAME</Button>\n\n\t\t\t\t\t\t<InfoDisplay user={this.state.user} game={this.state}/>\n\t\t\t\t    </div>\t\t\n\t\t\t\t)};\n\n}\nexport default Memory;"]},"metadata":{},"sourceType":"module"}