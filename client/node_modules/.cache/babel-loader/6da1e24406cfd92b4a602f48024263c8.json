{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Square from './Square';\nimport img_loader from './images';\nimport { GridList } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nfunction FormRow({\n  start,\n  row_size,\n  donne\n}) {\n  FormRow.PropTypes = {};\n  var row = [];\n\n  for (let i = start; i < start + row_size; i++) {\n    row.push(donne[i]);\n    console.log(\"fill row with:\" + i);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    item: true,\n    xs: 13,\n    spacing: 2,\n    direction: \"row\",\n    children: row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n}\n\n_c = FormRow;\nFormRow.defaultProps = {};\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction Board(props) {\n  const col_size = Math.ceil(Math.sqrt(props.donne.length));\n  console.log(\"col size = \" + col_size);\n  const grid = [];\n  let i = 0;\n\n  for (; i < col_size + 1; i++) {\n    grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n      donne: props.donne,\n      start: i * col_size,\n      row_size: col_size\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this));\n    console.log(\"new row\");\n  }\n\n  grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n    donne: props.donne,\n    start: i * col_size,\n    row_size: props.donne.length - i * col_size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this));\n  return grid;\n}\n\n_c2 = Board;\n\nclass Memory extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      card_list: this.load_cards(),\n      nb_row: 5,\n      nb_col: 6\n    };\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    const cards = [];\n    let i = 0;\n    fruits.map(fruit => {\n      cards.push( /*#__PURE__*/_jsxDEV(Square, {\n        fruit: fruit\n      }, i++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 16\n      }, this));\n      cards.push( /*#__PURE__*/_jsxDEV(Square, {\n        fruit: fruit\n      }, i++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 16\n      }, this));\n      return;\n    });\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    console.log(\"last key aloued:\" + i);\n    return shuffle(cards); //\t\treturn cards;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: \"auto\",\n      spacing: 1,\n      direction: \"column\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        donne: this.state.card_list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormRow\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["React","Grid","Square","img_loader","GridList","PropTypes","FormRow","start","row_size","donne","row","i","push","console","log","defaultProps","shuffleArray","array","length","j","Math","floor","random","temp","shuffle","currentIndex","temporaryValue","randomIndex","Board","props","col_size","ceil","sqrt","grid","Memory","Component","constructor","state","card_list","load_cards","nb_row","nb_col","fruits","cards","map","fruit","render"],"mappings":"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","sourcesContent":["import './Memory.css';\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Square from './Square'\nimport img_loader from './images'\nimport { GridList } from '@material-ui/core';\nimport PropTypes from 'prop-types'\n\n\nfunction FormRow({start, row_size, donne}) {\n\n\n\tFormRow.PropTypes = {\n\n\t}\n    var row = [];\n    for (let i = start; i < start + row_size; i++)\n    {\n\t  row.push(donne[i])\n\t\tconsole.log(\"fill row with:\" + i);\n    }\n\treturn (\n\t\t<Grid container item xs={13} spacing={2} direction='row'>\n\t\t{row}\n\t\t</Grid>\n\t);\n}\nFormRow.defaultProps = {\n\n}\nfunction shuffleArray(array) {\n\tlet i = array.length - 1;\n\tfor (; i > 0; i--) {\n\t  const j = Math.floor(Math.random() * (i + 1));\n\t  const temp = array[i];\n\t  array[i] = array[j];\n\t  array[j] = temp;\n\t}\n\treturn array;\n  }\n  function shuffle(array) {\n\tvar currentIndex = array.length, temporaryValue, randomIndex;\n  \n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n  \n\t  // Pick a remaining element...\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex -= 1;\n  \n\t  // And swap it with the current element.\n\t  temporaryValue = array[currentIndex];\n\t  array[currentIndex] = array[randomIndex];\n\t  array[randomIndex] = temporaryValue;\n\t}\n  \n\treturn array;\n  }\n\nfunction Board(props)\n{\n\tconst col_size = Math.ceil(Math.sqrt(props.donne.length));\n\tconsole.log(\"col size = \" + col_size);\n\tconst grid = [];\n\tlet i = 0;\n\tfor (; i < col_size + 1; i++)\n\t{\n\t\tgrid.push(<FormRow donne={props.donne} start={i * col_size} row_size={col_size}/>);\n\t\tconsole.log(\"new row\");\n\t}\n\tgrid.push(<FormRow donne={props.donne} start={i * col_size} row_size={props.donne.length - (i * col_size)}/> )\n\treturn (\n\t\tgrid\n\t);\n}\nclass Memory extends React.Component\n{\n  constructor()\n  {\n\tsuper();\n\tthis.state = {\n\t\tcard_list: this.load_cards(),\n\t\tnb_row: 5,\n\t\tnb_col: 6,\n\t};\n  }\n  load_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tconst cards = [];\n\t\tlet i = 0;\n\t\tfruits.map((fruit)=> {\n\t\t\t\tcards.push(<Square key={i++} fruit={fruit}/>);\n\t\t\t\tcards.push(<Square key={i++}fruit={fruit}/>);\n\t\t\t\treturn;\n\t\t});\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\tconsole.log(\"last key aloued:\" + i);\n\t\treturn shuffle(cards);\n//\t\treturn cards;\n}\n\n  render(){\n\treturn (\n\t\t<Grid container item xs=\"auto\" spacing={1} direction='column'>\n        <Board donne={this.state.card_list}/>\n\t\t</Grid>\n\t\t)}\n}\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/"]},"metadata":{},"sourceType":"module"}