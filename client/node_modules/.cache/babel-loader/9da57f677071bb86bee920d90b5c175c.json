{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sebastienlecaille/programmation/web/memory/src/Memory.js\";\nimport './Memory.css';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Square from './Square';\nimport img_loader from './images';\nimport { GridList } from '@material-ui/core';\n\nfunction FormRow(props) {\n  var row = [];\n\n  for (let i = 0; i < props.row_size; i++) {\n    row.push( /*#__PURE__*/_jsxDEV(Square, {\n      fruit: props.fruit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n}\n\n_c = FormRow;\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nfunction Board(props) {\n  const col_size = Math.sqrt(props.donne.length);\n  const grid = [];\n  let i = 0;\n\n  for (; i < col_size - 1; i++) {\n    grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n      row_size: col_size\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this));\n  }\n\n  grid.push( /*#__PURE__*/_jsxDEV(FormRow, {\n    row_size: props.donne.length - i * col_size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this));\n  return grid;\n}\n\n_c2 = Board;\n\nclass Memory extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      card_list: this.load_cards(),\n      nb_row: 5,\n      nb_col: 6\n    };\n  }\n\n  load_cards() {\n    const fruits = img_loader();\n    const cards = [];\n    let i = 0;\n    fruits.map(fruit => {\n      cards.push( /*#__PURE__*/_jsxDEV(\"square\", {\n        fruit: fruit\n      }, i++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }, this));\n      cards.push( /*#__PURE__*/_jsxDEV(\"square\", {\n        fruit: fruit\n      }, i++, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }, this));\n    });\n    console.log(\"set a donne of \" + cards.length + \" cards\");\n    return shuffleArray(cards);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      item: true,\n      xs: 12,\n      spacing: 3,\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        donne: this.state.card_list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormRow\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/sebastienlecaille/programmation/web/memory/src/Memory.js"],"names":["React","Grid","Square","img_loader","GridList","FormRow","props","row","i","row_size","push","fruit","shuffleArray","array","length","j","Math","floor","random","temp","Board","col_size","sqrt","donne","grid","Memory","Component","constructor","state","card_list","load_cards","nb_row","nb_col","fruits","cards","map","console","log","render"],"mappings":";;AAAA,OAAO,cAAP;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAGA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAEpB,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,QAA1B,EAAoCD,CAAC,EAArC,EACA;AACED,IAAAA,GAAG,CAACG,IAAJ,eAAS,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEJ,KAAK,CAACK;AAArB;AAAA;AAAA;AAAA;AAAA,YAAT;AACD;;AACJ,sBACC,QAAC,KAAD,CAAO,QAAP;AAAA,cACCJ;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;KAZQF,O;;AAaT,SAASO,YAAT,CAAsBC,KAAtB,EAA6B;AAC5B,MAAIL,CAAC,GAAGK,KAAK,CAACC,MAAN,GAAe,CAAvB;;AACA,SAAON,CAAC,GAAG,CAAX,EAAcA,CAAC,EAAf,EAAmB;AACjB,UAAMO,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,CAAC,GAAG,CAArB,CAAX,CAAV;AACA,UAAMW,IAAI,GAAGN,KAAK,CAACL,CAAD,CAAlB;AACAK,IAAAA,KAAK,CAACL,CAAD,CAAL,GAAWK,KAAK,CAACE,CAAD,CAAhB;AACAF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWI,IAAX;AACD;;AACD,SAAON,KAAP;AACE;;AAEH,SAASO,KAAT,CAAed,KAAf,EACA;AACC,QAAMe,QAAQ,GAAGL,IAAI,CAACM,IAAL,CAAUhB,KAAK,CAACiB,KAAN,CAAYT,MAAtB,CAAjB;AACA,QAAMU,IAAI,GAAG,EAAb;AACA,MAAIhB,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGa,QAAQ,GAAG,CAAtB,EAAyBb,CAAC,EAA1B,EACA;AACCgB,IAAAA,IAAI,CAACd,IAAL,eAAU,QAAC,OAAD;AAAS,MAAA,QAAQ,EAAEW;AAAnB;AAAA;AAAA;AAAA;AAAA,YAAV;AACA;;AACDG,EAAAA,IAAI,CAACd,IAAL,eAAU,QAAC,OAAD;AAAS,IAAA,QAAQ,EAAEJ,KAAK,CAACiB,KAAN,CAAYT,MAAZ,GAAsBN,CAAC,GAAGa;AAA7C;AAAA;AAAA;AAAA;AAAA,UAAV;AACA,SACCG,IADD;AAGA;;MAbQJ,K;;AAcT,MAAMK,MAAN,SAAqBzB,KAAK,CAAC0B,SAA3B,CACA;AACEC,EAAAA,WAAW,GACX;AACD;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,KAAKC,UAAL,EADC;AAEZC,MAAAA,MAAM,EAAE,CAFI;AAGZC,MAAAA,MAAM,EAAE;AAHI,KAAb;AAKE;;AACDF,EAAAA,UAAU,GACX;AACC,UAAMG,MAAM,GAAG9B,UAAU,EAAzB;AACA,UAAM+B,KAAK,GAAG,EAAd;AACA,QAAI1B,CAAC,GAAG,CAAR;AACAyB,IAAAA,MAAM,CAACE,GAAP,CAAYxB,KAAD,IAAU;AACnBuB,MAAAA,KAAK,CAACxB,IAAN,eAAW;AAAkB,QAAA,KAAK,EAAEC;AAAzB,SAAaH,CAAC,EAAd;AAAA;AAAA;AAAA;AAAA,cAAX;AACA0B,MAAAA,KAAK,CAACxB,IAAN,eAAW;AAAiB,QAAA,KAAK,EAAEC;AAAxB,SAAaH,CAAC,EAAd;AAAA;AAAA;AAAA;AAAA,cAAX;AACD,KAHD;AAIA4B,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBH,KAAK,CAACpB,MAA1B,GAAmC,QAA/C;AACA,WAAOF,YAAY,CAACsB,KAAD,CAAnB;AACA;;AAEAI,EAAAA,MAAM,GAAE;AACT,wBACC,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,IAAI,MAApB;AAAqB,MAAA,EAAE,EAAE,EAAzB;AAA6B,MAAA,OAAO,EAAE,CAAtC;AAAA,6BACM,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC;AAAzB;AAAA;AAAA;AAAA;AAAA;AADN;AAAA;AAAA;AAAA;AAAA,YADD;AAIG;;AA5BJ;;AA8BA,eAAeJ,MAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import './Memory.css';\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Square from './Square'\nimport img_loader from './images'\nimport { GridList } from '@material-ui/core';\n\n\nfunction FormRow(props) {\n\n    var row = [];\n    for (let i = 0; i < props.row_size; i++)\n    {\n      row.push(<Square fruit={props.fruit}/>)\n    }\n\treturn (\n\t\t<React.Fragment>\n\t\t{row}\n\t\t</React.Fragment>\n\t);\n}\nfunction shuffleArray(array) {\n\tlet i = array.length - 1;\n\tfor (; i > 0; i--) {\n\t  const j = Math.floor(Math.random() * (i + 1));\n\t  const temp = array[i];\n\t  array[i] = array[j];\n\t  array[j] = temp;\n\t}\n\treturn array;\n  }\n\nfunction Board(props)\n{\n\tconst col_size = Math.sqrt(props.donne.length);\n\tconst grid = [];\n\tlet i = 0;\n\tfor (; i < col_size - 1; i++)\n\t{\n\t\tgrid.push(<FormRow row_size={col_size}/>);\n\t}\n\tgrid.push(<FormRow row_size={props.donne.length - (i * col_size)}/> )\n\treturn (\n\t\tgrid\n\t);\n}\nclass Memory extends React.Component\n{\n  constructor()\n  {\n\tsuper();\n\tthis.state = {\n\t\tcard_list: this.load_cards(),\n\t\tnb_row: 5,\n\t\tnb_col: 6,\n\t};\n  }\n  load_cards()\n\t{\n\t\tconst fruits = img_loader();\n\t\tconst cards = [];\n\t\tlet i = 0;\n\t\tfruits.map((fruit)=> {\n\t\t\t\tcards.push(<square key={i++} fruit={fruit}/>);\n\t\t\t\tcards.push(<square key={i++}fruit={fruit}/>);\n\t\t});\n\t\tconsole.log(\"set a donne of \" + cards.length + \" cards\");\n\t\treturn shuffleArray(cards);\n\t}\n\n  render(){\n\treturn (\n\t\t<Grid container item xs={12} spacing={3}>\n        <Board donne={this.state.card_list}/>\n\t\t</Grid>\n\t\t)}\n}\nexport default Memory;\n/*\n\n\n<Grid container spacing={1} >\n            <Grid container item xs={12} spacing={3}>\n                <FormRow row_size={this.state.nb_row}/>\n            </Grid>\n\t\t</Grid>\n\t\t*/"]},"metadata":{},"sourceType":"module"}